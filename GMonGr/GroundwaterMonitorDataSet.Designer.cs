//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GMonGr {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GroundwaterMonitorDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GroundwaterMonitorDataSet : global::System.Data.DataSet {
        
        private GW_MONITORINGDataTable tableGW_MONITORING;
        
        private MONITOR_LOCATIONSDataTable tableMONITOR_LOCATIONS;
        
        private P1401DataTable tableP1401;
        
        private P1402DataTable tableP1402;
        
        private P4501DataTable tableP4501;
        
        private P4502DataTable tableP4502;
        
        private P4503DataTable tableP4503;
        
        private P4504DataTable tableP4504;
        
        private P4505DataTable tableP4505;
        
        private P5201DataTable tableP5201;
        
        private P5202DataTable tableP5202;
        
        private P5203DataTable tableP5203;
        
        private P5204DataTable tableP5204;
        
        private SESSIONDataTable tableSESSION;
        
        private GwMonUpdaterDataTable tableGwMonUpdater;
        
        private TGD1ADataTable tableTGD1A;
        
        private TGD1BDataTable tableTGD1B;
        
        private TGD2ADataTable tableTGD2A;
        
        private TGD2BDataTable tableTGD2B;
        
        private TGD3ADataTable tableTGD3A;
        
        private TGD3BDataTable tableTGD3B;
        
        private GwMonQcDataTable tableGwMonQc;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GroundwaterMonitorDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GroundwaterMonitorDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GW_MONITORING"] != null)) {
                    base.Tables.Add(new GW_MONITORINGDataTable(ds.Tables["GW_MONITORING"]));
                }
                if ((ds.Tables["MONITOR_LOCATIONS"] != null)) {
                    base.Tables.Add(new MONITOR_LOCATIONSDataTable(ds.Tables["MONITOR_LOCATIONS"]));
                }
                if ((ds.Tables["P1401"] != null)) {
                    base.Tables.Add(new P1401DataTable(ds.Tables["P1401"]));
                }
                if ((ds.Tables["P1402"] != null)) {
                    base.Tables.Add(new P1402DataTable(ds.Tables["P1402"]));
                }
                if ((ds.Tables["P4501"] != null)) {
                    base.Tables.Add(new P4501DataTable(ds.Tables["P4501"]));
                }
                if ((ds.Tables["P4502"] != null)) {
                    base.Tables.Add(new P4502DataTable(ds.Tables["P4502"]));
                }
                if ((ds.Tables["P4503"] != null)) {
                    base.Tables.Add(new P4503DataTable(ds.Tables["P4503"]));
                }
                if ((ds.Tables["P4504"] != null)) {
                    base.Tables.Add(new P4504DataTable(ds.Tables["P4504"]));
                }
                if ((ds.Tables["P4505"] != null)) {
                    base.Tables.Add(new P4505DataTable(ds.Tables["P4505"]));
                }
                if ((ds.Tables["P5201"] != null)) {
                    base.Tables.Add(new P5201DataTable(ds.Tables["P5201"]));
                }
                if ((ds.Tables["P5202"] != null)) {
                    base.Tables.Add(new P5202DataTable(ds.Tables["P5202"]));
                }
                if ((ds.Tables["P5203"] != null)) {
                    base.Tables.Add(new P5203DataTable(ds.Tables["P5203"]));
                }
                if ((ds.Tables["P5204"] != null)) {
                    base.Tables.Add(new P5204DataTable(ds.Tables["P5204"]));
                }
                if ((ds.Tables["SESSION"] != null)) {
                    base.Tables.Add(new SESSIONDataTable(ds.Tables["SESSION"]));
                }
                if ((ds.Tables["GwMonUpdater"] != null)) {
                    base.Tables.Add(new GwMonUpdaterDataTable(ds.Tables["GwMonUpdater"]));
                }
                if ((ds.Tables["TGD1A"] != null)) {
                    base.Tables.Add(new TGD1ADataTable(ds.Tables["TGD1A"]));
                }
                if ((ds.Tables["TGD1B"] != null)) {
                    base.Tables.Add(new TGD1BDataTable(ds.Tables["TGD1B"]));
                }
                if ((ds.Tables["TGD2A"] != null)) {
                    base.Tables.Add(new TGD2ADataTable(ds.Tables["TGD2A"]));
                }
                if ((ds.Tables["TGD2B"] != null)) {
                    base.Tables.Add(new TGD2BDataTable(ds.Tables["TGD2B"]));
                }
                if ((ds.Tables["TGD3A"] != null)) {
                    base.Tables.Add(new TGD3ADataTable(ds.Tables["TGD3A"]));
                }
                if ((ds.Tables["TGD3B"] != null)) {
                    base.Tables.Add(new TGD3BDataTable(ds.Tables["TGD3B"]));
                }
                if ((ds.Tables["GwMonQc"] != null)) {
                    base.Tables.Add(new GwMonQcDataTable(ds.Tables["GwMonQc"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GW_MONITORINGDataTable GW_MONITORING {
            get {
                return this.tableGW_MONITORING;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MONITOR_LOCATIONSDataTable MONITOR_LOCATIONS {
            get {
                return this.tableMONITOR_LOCATIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P1401DataTable P1401 {
            get {
                return this.tableP1401;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P1402DataTable P1402 {
            get {
                return this.tableP1402;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P4501DataTable P4501 {
            get {
                return this.tableP4501;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P4502DataTable P4502 {
            get {
                return this.tableP4502;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P4503DataTable P4503 {
            get {
                return this.tableP4503;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P4504DataTable P4504 {
            get {
                return this.tableP4504;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P4505DataTable P4505 {
            get {
                return this.tableP4505;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P5201DataTable P5201 {
            get {
                return this.tableP5201;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P5202DataTable P5202 {
            get {
                return this.tableP5202;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P5203DataTable P5203 {
            get {
                return this.tableP5203;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public P5204DataTable P5204 {
            get {
                return this.tableP5204;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SESSIONDataTable SESSION {
            get {
                return this.tableSESSION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GwMonUpdaterDataTable GwMonUpdater {
            get {
                return this.tableGwMonUpdater;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TGD1ADataTable TGD1A {
            get {
                return this.tableTGD1A;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TGD1BDataTable TGD1B {
            get {
                return this.tableTGD1B;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TGD2ADataTable TGD2A {
            get {
                return this.tableTGD2A;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TGD2BDataTable TGD2B {
            get {
                return this.tableTGD2B;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TGD3ADataTable TGD3A {
            get {
                return this.tableTGD3A;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TGD3BDataTable TGD3B {
            get {
                return this.tableTGD3B;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GwMonQcDataTable GwMonQc {
            get {
                return this.tableGwMonQc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GroundwaterMonitorDataSet cln = ((GroundwaterMonitorDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GW_MONITORING"] != null)) {
                    base.Tables.Add(new GW_MONITORINGDataTable(ds.Tables["GW_MONITORING"]));
                }
                if ((ds.Tables["MONITOR_LOCATIONS"] != null)) {
                    base.Tables.Add(new MONITOR_LOCATIONSDataTable(ds.Tables["MONITOR_LOCATIONS"]));
                }
                if ((ds.Tables["P1401"] != null)) {
                    base.Tables.Add(new P1401DataTable(ds.Tables["P1401"]));
                }
                if ((ds.Tables["P1402"] != null)) {
                    base.Tables.Add(new P1402DataTable(ds.Tables["P1402"]));
                }
                if ((ds.Tables["P4501"] != null)) {
                    base.Tables.Add(new P4501DataTable(ds.Tables["P4501"]));
                }
                if ((ds.Tables["P4502"] != null)) {
                    base.Tables.Add(new P4502DataTable(ds.Tables["P4502"]));
                }
                if ((ds.Tables["P4503"] != null)) {
                    base.Tables.Add(new P4503DataTable(ds.Tables["P4503"]));
                }
                if ((ds.Tables["P4504"] != null)) {
                    base.Tables.Add(new P4504DataTable(ds.Tables["P4504"]));
                }
                if ((ds.Tables["P4505"] != null)) {
                    base.Tables.Add(new P4505DataTable(ds.Tables["P4505"]));
                }
                if ((ds.Tables["P5201"] != null)) {
                    base.Tables.Add(new P5201DataTable(ds.Tables["P5201"]));
                }
                if ((ds.Tables["P5202"] != null)) {
                    base.Tables.Add(new P5202DataTable(ds.Tables["P5202"]));
                }
                if ((ds.Tables["P5203"] != null)) {
                    base.Tables.Add(new P5203DataTable(ds.Tables["P5203"]));
                }
                if ((ds.Tables["P5204"] != null)) {
                    base.Tables.Add(new P5204DataTable(ds.Tables["P5204"]));
                }
                if ((ds.Tables["SESSION"] != null)) {
                    base.Tables.Add(new SESSIONDataTable(ds.Tables["SESSION"]));
                }
                if ((ds.Tables["GwMonUpdater"] != null)) {
                    base.Tables.Add(new GwMonUpdaterDataTable(ds.Tables["GwMonUpdater"]));
                }
                if ((ds.Tables["TGD1A"] != null)) {
                    base.Tables.Add(new TGD1ADataTable(ds.Tables["TGD1A"]));
                }
                if ((ds.Tables["TGD1B"] != null)) {
                    base.Tables.Add(new TGD1BDataTable(ds.Tables["TGD1B"]));
                }
                if ((ds.Tables["TGD2A"] != null)) {
                    base.Tables.Add(new TGD2ADataTable(ds.Tables["TGD2A"]));
                }
                if ((ds.Tables["TGD2B"] != null)) {
                    base.Tables.Add(new TGD2BDataTable(ds.Tables["TGD2B"]));
                }
                if ((ds.Tables["TGD3A"] != null)) {
                    base.Tables.Add(new TGD3ADataTable(ds.Tables["TGD3A"]));
                }
                if ((ds.Tables["TGD3B"] != null)) {
                    base.Tables.Add(new TGD3BDataTable(ds.Tables["TGD3B"]));
                }
                if ((ds.Tables["GwMonQc"] != null)) {
                    base.Tables.Add(new GwMonQcDataTable(ds.Tables["GwMonQc"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGW_MONITORING = ((GW_MONITORINGDataTable)(base.Tables["GW_MONITORING"]));
            if ((initTable == true)) {
                if ((this.tableGW_MONITORING != null)) {
                    this.tableGW_MONITORING.InitVars();
                }
            }
            this.tableMONITOR_LOCATIONS = ((MONITOR_LOCATIONSDataTable)(base.Tables["MONITOR_LOCATIONS"]));
            if ((initTable == true)) {
                if ((this.tableMONITOR_LOCATIONS != null)) {
                    this.tableMONITOR_LOCATIONS.InitVars();
                }
            }
            this.tableP1401 = ((P1401DataTable)(base.Tables["P1401"]));
            if ((initTable == true)) {
                if ((this.tableP1401 != null)) {
                    this.tableP1401.InitVars();
                }
            }
            this.tableP1402 = ((P1402DataTable)(base.Tables["P1402"]));
            if ((initTable == true)) {
                if ((this.tableP1402 != null)) {
                    this.tableP1402.InitVars();
                }
            }
            this.tableP4501 = ((P4501DataTable)(base.Tables["P4501"]));
            if ((initTable == true)) {
                if ((this.tableP4501 != null)) {
                    this.tableP4501.InitVars();
                }
            }
            this.tableP4502 = ((P4502DataTable)(base.Tables["P4502"]));
            if ((initTable == true)) {
                if ((this.tableP4502 != null)) {
                    this.tableP4502.InitVars();
                }
            }
            this.tableP4503 = ((P4503DataTable)(base.Tables["P4503"]));
            if ((initTable == true)) {
                if ((this.tableP4503 != null)) {
                    this.tableP4503.InitVars();
                }
            }
            this.tableP4504 = ((P4504DataTable)(base.Tables["P4504"]));
            if ((initTable == true)) {
                if ((this.tableP4504 != null)) {
                    this.tableP4504.InitVars();
                }
            }
            this.tableP4505 = ((P4505DataTable)(base.Tables["P4505"]));
            if ((initTable == true)) {
                if ((this.tableP4505 != null)) {
                    this.tableP4505.InitVars();
                }
            }
            this.tableP5201 = ((P5201DataTable)(base.Tables["P5201"]));
            if ((initTable == true)) {
                if ((this.tableP5201 != null)) {
                    this.tableP5201.InitVars();
                }
            }
            this.tableP5202 = ((P5202DataTable)(base.Tables["P5202"]));
            if ((initTable == true)) {
                if ((this.tableP5202 != null)) {
                    this.tableP5202.InitVars();
                }
            }
            this.tableP5203 = ((P5203DataTable)(base.Tables["P5203"]));
            if ((initTable == true)) {
                if ((this.tableP5203 != null)) {
                    this.tableP5203.InitVars();
                }
            }
            this.tableP5204 = ((P5204DataTable)(base.Tables["P5204"]));
            if ((initTable == true)) {
                if ((this.tableP5204 != null)) {
                    this.tableP5204.InitVars();
                }
            }
            this.tableSESSION = ((SESSIONDataTable)(base.Tables["SESSION"]));
            if ((initTable == true)) {
                if ((this.tableSESSION != null)) {
                    this.tableSESSION.InitVars();
                }
            }
            this.tableGwMonUpdater = ((GwMonUpdaterDataTable)(base.Tables["GwMonUpdater"]));
            if ((initTable == true)) {
                if ((this.tableGwMonUpdater != null)) {
                    this.tableGwMonUpdater.InitVars();
                }
            }
            this.tableTGD1A = ((TGD1ADataTable)(base.Tables["TGD1A"]));
            if ((initTable == true)) {
                if ((this.tableTGD1A != null)) {
                    this.tableTGD1A.InitVars();
                }
            }
            this.tableTGD1B = ((TGD1BDataTable)(base.Tables["TGD1B"]));
            if ((initTable == true)) {
                if ((this.tableTGD1B != null)) {
                    this.tableTGD1B.InitVars();
                }
            }
            this.tableTGD2A = ((TGD2ADataTable)(base.Tables["TGD2A"]));
            if ((initTable == true)) {
                if ((this.tableTGD2A != null)) {
                    this.tableTGD2A.InitVars();
                }
            }
            this.tableTGD2B = ((TGD2BDataTable)(base.Tables["TGD2B"]));
            if ((initTable == true)) {
                if ((this.tableTGD2B != null)) {
                    this.tableTGD2B.InitVars();
                }
            }
            this.tableTGD3A = ((TGD3ADataTable)(base.Tables["TGD3A"]));
            if ((initTable == true)) {
                if ((this.tableTGD3A != null)) {
                    this.tableTGD3A.InitVars();
                }
            }
            this.tableTGD3B = ((TGD3BDataTable)(base.Tables["TGD3B"]));
            if ((initTable == true)) {
                if ((this.tableTGD3B != null)) {
                    this.tableTGD3B.InitVars();
                }
            }
            this.tableGwMonQc = ((GwMonQcDataTable)(base.Tables["GwMonQc"]));
            if ((initTable == true)) {
                if ((this.tableGwMonQc != null)) {
                    this.tableGwMonQc.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GroundwaterMonitorDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GroundwaterMonitorDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGW_MONITORING = new GW_MONITORINGDataTable();
            base.Tables.Add(this.tableGW_MONITORING);
            this.tableMONITOR_LOCATIONS = new MONITOR_LOCATIONSDataTable();
            base.Tables.Add(this.tableMONITOR_LOCATIONS);
            this.tableP1401 = new P1401DataTable();
            base.Tables.Add(this.tableP1401);
            this.tableP1402 = new P1402DataTable();
            base.Tables.Add(this.tableP1402);
            this.tableP4501 = new P4501DataTable();
            base.Tables.Add(this.tableP4501);
            this.tableP4502 = new P4502DataTable();
            base.Tables.Add(this.tableP4502);
            this.tableP4503 = new P4503DataTable();
            base.Tables.Add(this.tableP4503);
            this.tableP4504 = new P4504DataTable();
            base.Tables.Add(this.tableP4504);
            this.tableP4505 = new P4505DataTable();
            base.Tables.Add(this.tableP4505);
            this.tableP5201 = new P5201DataTable();
            base.Tables.Add(this.tableP5201);
            this.tableP5202 = new P5202DataTable();
            base.Tables.Add(this.tableP5202);
            this.tableP5203 = new P5203DataTable();
            base.Tables.Add(this.tableP5203);
            this.tableP5204 = new P5204DataTable();
            base.Tables.Add(this.tableP5204);
            this.tableSESSION = new SESSIONDataTable();
            base.Tables.Add(this.tableSESSION);
            this.tableGwMonUpdater = new GwMonUpdaterDataTable();
            base.Tables.Add(this.tableGwMonUpdater);
            this.tableTGD1A = new TGD1ADataTable();
            base.Tables.Add(this.tableTGD1A);
            this.tableTGD1B = new TGD1BDataTable();
            base.Tables.Add(this.tableTGD1B);
            this.tableTGD2A = new TGD2ADataTable();
            base.Tables.Add(this.tableTGD2A);
            this.tableTGD2B = new TGD2BDataTable();
            base.Tables.Add(this.tableTGD2B);
            this.tableTGD3A = new TGD3ADataTable();
            base.Tables.Add(this.tableTGD3A);
            this.tableTGD3B = new TGD3BDataTable();
            base.Tables.Add(this.tableTGD3B);
            this.tableGwMonQc = new GwMonQcDataTable();
            base.Tables.Add(this.tableGwMonQc);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGW_MONITORING() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMONITOR_LOCATIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP1401() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP1402() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP4501() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP4502() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP4503() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP4504() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP4505() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP5201() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP5202() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP5203() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeP5204() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSESSION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGwMonUpdater() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTGD1A() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTGD1B() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTGD2A() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTGD2B() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTGD3A() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTGD3B() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGwMonQc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GW_MONITORINGRowChangeEventHandler(object sender, GW_MONITORINGRowChangeEvent e);
        
        public delegate void MONITOR_LOCATIONSRowChangeEventHandler(object sender, MONITOR_LOCATIONSRowChangeEvent e);
        
        public delegate void P1401RowChangeEventHandler(object sender, P1401RowChangeEvent e);
        
        public delegate void P1402RowChangeEventHandler(object sender, P1402RowChangeEvent e);
        
        public delegate void P4501RowChangeEventHandler(object sender, P4501RowChangeEvent e);
        
        public delegate void P4502RowChangeEventHandler(object sender, P4502RowChangeEvent e);
        
        public delegate void P4503RowChangeEventHandler(object sender, P4503RowChangeEvent e);
        
        public delegate void P4504RowChangeEventHandler(object sender, P4504RowChangeEvent e);
        
        public delegate void P4505RowChangeEventHandler(object sender, P4505RowChangeEvent e);
        
        public delegate void P5201RowChangeEventHandler(object sender, P5201RowChangeEvent e);
        
        public delegate void P5202RowChangeEventHandler(object sender, P5202RowChangeEvent e);
        
        public delegate void P5203RowChangeEventHandler(object sender, P5203RowChangeEvent e);
        
        public delegate void P5204RowChangeEventHandler(object sender, P5204RowChangeEvent e);
        
        public delegate void SESSIONRowChangeEventHandler(object sender, SESSIONRowChangeEvent e);
        
        public delegate void GwMonUpdaterRowChangeEventHandler(object sender, GwMonUpdaterRowChangeEvent e);
        
        public delegate void TGD1ARowChangeEventHandler(object sender, TGD1ARowChangeEvent e);
        
        public delegate void TGD1BRowChangeEventHandler(object sender, TGD1BRowChangeEvent e);
        
        public delegate void TGD2ARowChangeEventHandler(object sender, TGD2ARowChangeEvent e);
        
        public delegate void TGD2BRowChangeEventHandler(object sender, TGD2BRowChangeEvent e);
        
        public delegate void TGD3ARowChangeEventHandler(object sender, TGD3ARowChangeEvent e);
        
        public delegate void TGD3BRowChangeEventHandler(object sender, TGD3BRowChangeEvent e);
        
        public delegate void GwMonQcRowChangeEventHandler(object sender, GwMonQcRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GW_MONITORINGDataTable : global::System.Data.TypedTableBase<GW_MONITORINGRow> {
            
            private global::System.Data.DataColumn columngwmon_edit_id;
            
            private global::System.Data.DataColumn columnedit_id;
            
            private global::System.Data.DataColumn columnedit_date;
            
            private global::System.Data.DataColumn columnedited_by;
            
            private global::System.Data.DataColumn columnreading_date;
            
            private global::System.Data.DataColumn columnreading_hertz;
            
            private global::System.Data.DataColumn columnheas_psi;
            
            private global::System.Data.DataColumn columntemp_celsius;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITORINGDataTable() {
                this.TableName = "GW_MONITORING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GW_MONITORINGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GW_MONITORINGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwmon_edit_idColumn {
                get {
                    return this.columngwmon_edit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_idColumn {
                get {
                    return this.columnedit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_dateColumn {
                get {
                    return this.columnedit_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edited_byColumn {
                get {
                    return this.columnedited_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reading_dateColumn {
                get {
                    return this.columnreading_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reading_hertzColumn {
                get {
                    return this.columnreading_hertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn heas_psiColumn {
                get {
                    return this.columnheas_psi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn temp_celsiusColumn {
                get {
                    return this.columntemp_celsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITORINGRow this[int index] {
                get {
                    return ((GW_MONITORINGRow)(this.Rows[index]));
                }
            }
            
            public event GW_MONITORINGRowChangeEventHandler GW_MONITORINGRowChanging;
            
            public event GW_MONITORINGRowChangeEventHandler GW_MONITORINGRowChanged;
            
            public event GW_MONITORINGRowChangeEventHandler GW_MONITORINGRowDeleting;
            
            public event GW_MONITORINGRowChangeEventHandler GW_MONITORINGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGW_MONITORINGRow(GW_MONITORINGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITORINGRow AddGW_MONITORINGRow(int gwmon_edit_id, int edit_id, System.DateTime edit_date, string edited_by, System.DateTime reading_date, double reading_hertz, double heas_psi, double temp_celsius) {
                GW_MONITORINGRow rowGW_MONITORINGRow = ((GW_MONITORINGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        gwmon_edit_id,
                        edit_id,
                        edit_date,
                        edited_by,
                        reading_date,
                        reading_hertz,
                        heas_psi,
                        temp_celsius};
                rowGW_MONITORINGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGW_MONITORINGRow);
                return rowGW_MONITORINGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GW_MONITORINGDataTable cln = ((GW_MONITORINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GW_MONITORINGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngwmon_edit_id = base.Columns["gwmon_edit_id"];
                this.columnedit_id = base.Columns["edit_id"];
                this.columnedit_date = base.Columns["edit_date"];
                this.columnedited_by = base.Columns["edited_by"];
                this.columnreading_date = base.Columns["reading_date"];
                this.columnreading_hertz = base.Columns["reading_hertz"];
                this.columnheas_psi = base.Columns["heas_psi"];
                this.columntemp_celsius = base.Columns["temp_celsius"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngwmon_edit_id = new global::System.Data.DataColumn("gwmon_edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwmon_edit_id);
                this.columnedit_id = new global::System.Data.DataColumn("edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_id);
                this.columnedit_date = new global::System.Data.DataColumn("edit_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_date);
                this.columnedited_by = new global::System.Data.DataColumn("edited_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedited_by);
                this.columnreading_date = new global::System.Data.DataColumn("reading_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreading_date);
                this.columnreading_hertz = new global::System.Data.DataColumn("reading_hertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreading_hertz);
                this.columnheas_psi = new global::System.Data.DataColumn("heas_psi", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheas_psi);
                this.columntemp_celsius = new global::System.Data.DataColumn("temp_celsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp_celsius);
                this.columngwmon_edit_id.AllowDBNull = false;
                this.columnedit_id.AllowDBNull = false;
                this.columnedit_date.AllowDBNull = false;
                this.columnedited_by.AllowDBNull = false;
                this.columnedited_by.MaxLength = 50;
                this.columnreading_date.AllowDBNull = false;
                this.columnreading_hertz.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITORINGRow NewGW_MONITORINGRow() {
                return ((GW_MONITORINGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GW_MONITORINGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GW_MONITORINGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GW_MONITORINGRowChanged != null)) {
                    this.GW_MONITORINGRowChanged(this, new GW_MONITORINGRowChangeEvent(((GW_MONITORINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GW_MONITORINGRowChanging != null)) {
                    this.GW_MONITORINGRowChanging(this, new GW_MONITORINGRowChangeEvent(((GW_MONITORINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GW_MONITORINGRowDeleted != null)) {
                    this.GW_MONITORINGRowDeleted(this, new GW_MONITORINGRowChangeEvent(((GW_MONITORINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GW_MONITORINGRowDeleting != null)) {
                    this.GW_MONITORINGRowDeleting(this, new GW_MONITORINGRowChangeEvent(((GW_MONITORINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGW_MONITORINGRow(GW_MONITORINGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GW_MONITORINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MONITOR_LOCATIONSDataTable : global::System.Data.TypedTableBase<MONITOR_LOCATIONSRow> {
            
            private global::System.Data.DataColumn columnsensor_id;
            
            private global::System.Data.DataColumn columnsensor_name;
            
            private global::System.Data.DataColumn columnserial_num;
            
            private global::System.Data.DataColumn columnsensor_depth_ft;
            
            private global::System.Data.DataColumn columnmeasure_down_ft;
            
            private global::System.Data.DataColumn columntoc_elev_ft;
            
            private global::System.Data.DataColumn columncal_fact_psi_a;
            
            private global::System.Data.DataColumn columncal_fact_psi_b;
            
            private global::System.Data.DataColumn columncal_fact_psi_c;
            
            private global::System.Data.DataColumn columncal_fact_head_ft_a;
            
            private global::System.Data.DataColumn columncal_fact_head_ft_b;
            
            private global::System.Data.DataColumn columncal_fact_head_ft_c;
            
            private global::System.Data.DataColumn columnnorthing_ft;
            
            private global::System.Data.DataColumn columneasting_ft;
            
            private global::System.Data.DataColumn columnnotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSDataTable() {
                this.TableName = "MONITOR_LOCATIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MONITOR_LOCATIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MONITOR_LOCATIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_idColumn {
                get {
                    return this.columnsensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_nameColumn {
                get {
                    return this.columnsensor_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn serial_numColumn {
                get {
                    return this.columnserial_num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_depth_ftColumn {
                get {
                    return this.columnsensor_depth_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn measure_down_ftColumn {
                get {
                    return this.columnmeasure_down_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn toc_elev_ftColumn {
                get {
                    return this.columntoc_elev_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_psi_aColumn {
                get {
                    return this.columncal_fact_psi_a;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_psi_bColumn {
                get {
                    return this.columncal_fact_psi_b;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_psi_cColumn {
                get {
                    return this.columncal_fact_psi_c;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_head_ft_aColumn {
                get {
                    return this.columncal_fact_head_ft_a;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_head_ft_bColumn {
                get {
                    return this.columncal_fact_head_ft_b;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_head_ft_cColumn {
                get {
                    return this.columncal_fact_head_ft_c;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn northing_ftColumn {
                get {
                    return this.columnnorthing_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn easting_ftColumn {
                get {
                    return this.columneasting_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notesColumn {
                get {
                    return this.columnnotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow this[int index] {
                get {
                    return ((MONITOR_LOCATIONSRow)(this.Rows[index]));
                }
            }
            
            public event MONITOR_LOCATIONSRowChangeEventHandler MONITOR_LOCATIONSRowChanging;
            
            public event MONITOR_LOCATIONSRowChangeEventHandler MONITOR_LOCATIONSRowChanged;
            
            public event MONITOR_LOCATIONSRowChangeEventHandler MONITOR_LOCATIONSRowDeleting;
            
            public event MONITOR_LOCATIONSRowChangeEventHandler MONITOR_LOCATIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMONITOR_LOCATIONSRow(MONITOR_LOCATIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow AddMONITOR_LOCATIONSRow(string sensor_id, string sensor_name, string serial_num, double sensor_depth_ft, double measure_down_ft, double toc_elev_ft, double cal_fact_psi_a, double cal_fact_psi_b, double cal_fact_psi_c, double cal_fact_head_ft_a, double cal_fact_head_ft_b, double cal_fact_head_ft_c, double northing_ft, double easting_ft, string notes) {
                MONITOR_LOCATIONSRow rowMONITOR_LOCATIONSRow = ((MONITOR_LOCATIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sensor_id,
                        sensor_name,
                        serial_num,
                        sensor_depth_ft,
                        measure_down_ft,
                        toc_elev_ft,
                        cal_fact_psi_a,
                        cal_fact_psi_b,
                        cal_fact_psi_c,
                        cal_fact_head_ft_a,
                        cal_fact_head_ft_b,
                        cal_fact_head_ft_c,
                        northing_ft,
                        easting_ft,
                        notes};
                rowMONITOR_LOCATIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMONITOR_LOCATIONSRow);
                return rowMONITOR_LOCATIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MONITOR_LOCATIONSDataTable cln = ((MONITOR_LOCATIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MONITOR_LOCATIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsensor_id = base.Columns["sensor_id"];
                this.columnsensor_name = base.Columns["sensor_name"];
                this.columnserial_num = base.Columns["serial_num"];
                this.columnsensor_depth_ft = base.Columns["sensor_depth_ft"];
                this.columnmeasure_down_ft = base.Columns["measure_down_ft"];
                this.columntoc_elev_ft = base.Columns["toc_elev_ft"];
                this.columncal_fact_psi_a = base.Columns["cal_fact_psi_a"];
                this.columncal_fact_psi_b = base.Columns["cal_fact_psi_b"];
                this.columncal_fact_psi_c = base.Columns["cal_fact_psi_c"];
                this.columncal_fact_head_ft_a = base.Columns["cal_fact_head_ft_a"];
                this.columncal_fact_head_ft_b = base.Columns["cal_fact_head_ft_b"];
                this.columncal_fact_head_ft_c = base.Columns["cal_fact_head_ft_c"];
                this.columnnorthing_ft = base.Columns["northing_ft"];
                this.columneasting_ft = base.Columns["easting_ft"];
                this.columnnotes = base.Columns["notes"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsensor_id = new global::System.Data.DataColumn("sensor_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_id);
                this.columnsensor_name = new global::System.Data.DataColumn("sensor_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_name);
                this.columnserial_num = new global::System.Data.DataColumn("serial_num", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnserial_num);
                this.columnsensor_depth_ft = new global::System.Data.DataColumn("sensor_depth_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_depth_ft);
                this.columnmeasure_down_ft = new global::System.Data.DataColumn("measure_down_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmeasure_down_ft);
                this.columntoc_elev_ft = new global::System.Data.DataColumn("toc_elev_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntoc_elev_ft);
                this.columncal_fact_psi_a = new global::System.Data.DataColumn("cal_fact_psi_a", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_psi_a);
                this.columncal_fact_psi_b = new global::System.Data.DataColumn("cal_fact_psi_b", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_psi_b);
                this.columncal_fact_psi_c = new global::System.Data.DataColumn("cal_fact_psi_c", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_psi_c);
                this.columncal_fact_head_ft_a = new global::System.Data.DataColumn("cal_fact_head_ft_a", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_head_ft_a);
                this.columncal_fact_head_ft_b = new global::System.Data.DataColumn("cal_fact_head_ft_b", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_head_ft_b);
                this.columncal_fact_head_ft_c = new global::System.Data.DataColumn("cal_fact_head_ft_c", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_head_ft_c);
                this.columnnorthing_ft = new global::System.Data.DataColumn("northing_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnorthing_ft);
                this.columneasting_ft = new global::System.Data.DataColumn("easting_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columneasting_ft);
                this.columnnotes = new global::System.Data.DataColumn("notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotes);
                this.columnsensor_id.AllowDBNull = false;
                this.columnsensor_id.MaxLength = 50;
                this.columnsensor_name.AllowDBNull = false;
                this.columnsensor_name.MaxLength = 50;
                this.columnserial_num.MaxLength = 50;
                this.columnsensor_depth_ft.AllowDBNull = false;
                this.columnmeasure_down_ft.AllowDBNull = false;
                this.columntoc_elev_ft.AllowDBNull = false;
                this.columncal_fact_psi_a.AllowDBNull = false;
                this.columncal_fact_psi_b.AllowDBNull = false;
                this.columncal_fact_psi_c.AllowDBNull = false;
                this.columncal_fact_head_ft_a.AllowDBNull = false;
                this.columncal_fact_head_ft_b.AllowDBNull = false;
                this.columncal_fact_head_ft_c.AllowDBNull = false;
                this.columnnotes.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow NewMONITOR_LOCATIONSRow() {
                return ((MONITOR_LOCATIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MONITOR_LOCATIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MONITOR_LOCATIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MONITOR_LOCATIONSRowChanged != null)) {
                    this.MONITOR_LOCATIONSRowChanged(this, new MONITOR_LOCATIONSRowChangeEvent(((MONITOR_LOCATIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MONITOR_LOCATIONSRowChanging != null)) {
                    this.MONITOR_LOCATIONSRowChanging(this, new MONITOR_LOCATIONSRowChangeEvent(((MONITOR_LOCATIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MONITOR_LOCATIONSRowDeleted != null)) {
                    this.MONITOR_LOCATIONSRowDeleted(this, new MONITOR_LOCATIONSRowChangeEvent(((MONITOR_LOCATIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MONITOR_LOCATIONSRowDeleting != null)) {
                    this.MONITOR_LOCATIONSRowDeleting(this, new MONITOR_LOCATIONSRowChangeEvent(((MONITOR_LOCATIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMONITOR_LOCATIONSRow(MONITOR_LOCATIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MONITOR_LOCATIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P1401DataTable : global::System.Data.TypedTableBase<P1401Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1401DataTable() {
                this.TableName = "P1401";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P1401DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P1401DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1401Row this[int index] {
                get {
                    return ((P1401Row)(this.Rows[index]));
                }
            }
            
            public event P1401RowChangeEventHandler P1401RowChanging;
            
            public event P1401RowChangeEventHandler P1401RowChanged;
            
            public event P1401RowChangeEventHandler P1401RowDeleting;
            
            public event P1401RowChangeEventHandler P1401RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP1401Row(P1401Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1401Row AddP1401Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P1401Row rowP1401Row = ((P1401Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP1401Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP1401Row);
                return rowP1401Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P1401DataTable cln = ((P1401DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P1401DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1401Row NewP1401Row() {
                return ((P1401Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P1401Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P1401Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P1401RowChanged != null)) {
                    this.P1401RowChanged(this, new P1401RowChangeEvent(((P1401Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P1401RowChanging != null)) {
                    this.P1401RowChanging(this, new P1401RowChangeEvent(((P1401Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P1401RowDeleted != null)) {
                    this.P1401RowDeleted(this, new P1401RowChangeEvent(((P1401Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P1401RowDeleting != null)) {
                    this.P1401RowDeleting(this, new P1401RowChangeEvent(((P1401Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP1401Row(P1401Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P1401DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P1402DataTable : global::System.Data.TypedTableBase<P1402Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1402DataTable() {
                this.TableName = "P1402";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P1402DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P1402DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1402Row this[int index] {
                get {
                    return ((P1402Row)(this.Rows[index]));
                }
            }
            
            public event P1402RowChangeEventHandler P1402RowChanging;
            
            public event P1402RowChangeEventHandler P1402RowChanged;
            
            public event P1402RowChangeEventHandler P1402RowDeleting;
            
            public event P1402RowChangeEventHandler P1402RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP1402Row(P1402Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1402Row AddP1402Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P1402Row rowP1402Row = ((P1402Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP1402Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP1402Row);
                return rowP1402Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P1402DataTable cln = ((P1402DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P1402DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1402Row NewP1402Row() {
                return ((P1402Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P1402Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P1402Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P1402RowChanged != null)) {
                    this.P1402RowChanged(this, new P1402RowChangeEvent(((P1402Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P1402RowChanging != null)) {
                    this.P1402RowChanging(this, new P1402RowChangeEvent(((P1402Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P1402RowDeleted != null)) {
                    this.P1402RowDeleted(this, new P1402RowChangeEvent(((P1402Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P1402RowDeleting != null)) {
                    this.P1402RowDeleting(this, new P1402RowChangeEvent(((P1402Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP1402Row(P1402Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P1402DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P4501DataTable : global::System.Data.TypedTableBase<P4501Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4501DataTable() {
                this.TableName = "P4501";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4501DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P4501DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4501Row this[int index] {
                get {
                    return ((P4501Row)(this.Rows[index]));
                }
            }
            
            public event P4501RowChangeEventHandler P4501RowChanging;
            
            public event P4501RowChangeEventHandler P4501RowChanged;
            
            public event P4501RowChangeEventHandler P4501RowDeleting;
            
            public event P4501RowChangeEventHandler P4501RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP4501Row(P4501Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4501Row AddP4501Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P4501Row rowP4501Row = ((P4501Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP4501Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP4501Row);
                return rowP4501Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P4501DataTable cln = ((P4501DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P4501DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4501Row NewP4501Row() {
                return ((P4501Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P4501Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P4501Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P4501RowChanged != null)) {
                    this.P4501RowChanged(this, new P4501RowChangeEvent(((P4501Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P4501RowChanging != null)) {
                    this.P4501RowChanging(this, new P4501RowChangeEvent(((P4501Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P4501RowDeleted != null)) {
                    this.P4501RowDeleted(this, new P4501RowChangeEvent(((P4501Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P4501RowDeleting != null)) {
                    this.P4501RowDeleting(this, new P4501RowChangeEvent(((P4501Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP4501Row(P4501Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P4501DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P4502DataTable : global::System.Data.TypedTableBase<P4502Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4502DataTable() {
                this.TableName = "P4502";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4502DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P4502DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4502Row this[int index] {
                get {
                    return ((P4502Row)(this.Rows[index]));
                }
            }
            
            public event P4502RowChangeEventHandler P4502RowChanging;
            
            public event P4502RowChangeEventHandler P4502RowChanged;
            
            public event P4502RowChangeEventHandler P4502RowDeleting;
            
            public event P4502RowChangeEventHandler P4502RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP4502Row(P4502Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4502Row AddP4502Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P4502Row rowP4502Row = ((P4502Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP4502Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP4502Row);
                return rowP4502Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P4502DataTable cln = ((P4502DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P4502DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4502Row NewP4502Row() {
                return ((P4502Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P4502Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P4502Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P4502RowChanged != null)) {
                    this.P4502RowChanged(this, new P4502RowChangeEvent(((P4502Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P4502RowChanging != null)) {
                    this.P4502RowChanging(this, new P4502RowChangeEvent(((P4502Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P4502RowDeleted != null)) {
                    this.P4502RowDeleted(this, new P4502RowChangeEvent(((P4502Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P4502RowDeleting != null)) {
                    this.P4502RowDeleting(this, new P4502RowChangeEvent(((P4502Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP4502Row(P4502Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P4502DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P4503DataTable : global::System.Data.TypedTableBase<P4503Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4503DataTable() {
                this.TableName = "P4503";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4503DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P4503DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4503Row this[int index] {
                get {
                    return ((P4503Row)(this.Rows[index]));
                }
            }
            
            public event P4503RowChangeEventHandler P4503RowChanging;
            
            public event P4503RowChangeEventHandler P4503RowChanged;
            
            public event P4503RowChangeEventHandler P4503RowDeleting;
            
            public event P4503RowChangeEventHandler P4503RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP4503Row(P4503Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4503Row AddP4503Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P4503Row rowP4503Row = ((P4503Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP4503Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP4503Row);
                return rowP4503Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P4503DataTable cln = ((P4503DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P4503DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4503Row NewP4503Row() {
                return ((P4503Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P4503Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P4503Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P4503RowChanged != null)) {
                    this.P4503RowChanged(this, new P4503RowChangeEvent(((P4503Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P4503RowChanging != null)) {
                    this.P4503RowChanging(this, new P4503RowChangeEvent(((P4503Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P4503RowDeleted != null)) {
                    this.P4503RowDeleted(this, new P4503RowChangeEvent(((P4503Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P4503RowDeleting != null)) {
                    this.P4503RowDeleting(this, new P4503RowChangeEvent(((P4503Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP4503Row(P4503Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P4503DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P4504DataTable : global::System.Data.TypedTableBase<P4504Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4504DataTable() {
                this.TableName = "P4504";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4504DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P4504DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4504Row this[int index] {
                get {
                    return ((P4504Row)(this.Rows[index]));
                }
            }
            
            public event P4504RowChangeEventHandler P4504RowChanging;
            
            public event P4504RowChangeEventHandler P4504RowChanged;
            
            public event P4504RowChangeEventHandler P4504RowDeleting;
            
            public event P4504RowChangeEventHandler P4504RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP4504Row(P4504Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4504Row AddP4504Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P4504Row rowP4504Row = ((P4504Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP4504Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP4504Row);
                return rowP4504Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P4504DataTable cln = ((P4504DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P4504DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4504Row NewP4504Row() {
                return ((P4504Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P4504Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P4504Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P4504RowChanged != null)) {
                    this.P4504RowChanged(this, new P4504RowChangeEvent(((P4504Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P4504RowChanging != null)) {
                    this.P4504RowChanging(this, new P4504RowChangeEvent(((P4504Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P4504RowDeleted != null)) {
                    this.P4504RowDeleted(this, new P4504RowChangeEvent(((P4504Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P4504RowDeleting != null)) {
                    this.P4504RowDeleting(this, new P4504RowChangeEvent(((P4504Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP4504Row(P4504Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P4504DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P4505DataTable : global::System.Data.TypedTableBase<P4505Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4505DataTable() {
                this.TableName = "P4505";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4505DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P4505DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4505Row this[int index] {
                get {
                    return ((P4505Row)(this.Rows[index]));
                }
            }
            
            public event P4505RowChangeEventHandler P4505RowChanging;
            
            public event P4505RowChangeEventHandler P4505RowChanged;
            
            public event P4505RowChangeEventHandler P4505RowDeleting;
            
            public event P4505RowChangeEventHandler P4505RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP4505Row(P4505Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4505Row AddP4505Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P4505Row rowP4505Row = ((P4505Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP4505Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP4505Row);
                return rowP4505Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P4505DataTable cln = ((P4505DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P4505DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4505Row NewP4505Row() {
                return ((P4505Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P4505Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P4505Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P4505RowChanged != null)) {
                    this.P4505RowChanged(this, new P4505RowChangeEvent(((P4505Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P4505RowChanging != null)) {
                    this.P4505RowChanging(this, new P4505RowChangeEvent(((P4505Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P4505RowDeleted != null)) {
                    this.P4505RowDeleted(this, new P4505RowChangeEvent(((P4505Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P4505RowDeleting != null)) {
                    this.P4505RowDeleting(this, new P4505RowChangeEvent(((P4505Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP4505Row(P4505Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P4505DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P5201DataTable : global::System.Data.TypedTableBase<P5201Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5201DataTable() {
                this.TableName = "P5201";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P5201DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P5201DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5201Row this[int index] {
                get {
                    return ((P5201Row)(this.Rows[index]));
                }
            }
            
            public event P5201RowChangeEventHandler P5201RowChanging;
            
            public event P5201RowChangeEventHandler P5201RowChanged;
            
            public event P5201RowChangeEventHandler P5201RowDeleting;
            
            public event P5201RowChangeEventHandler P5201RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP5201Row(P5201Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5201Row AddP5201Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P5201Row rowP5201Row = ((P5201Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP5201Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP5201Row);
                return rowP5201Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P5201DataTable cln = ((P5201DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P5201DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5201Row NewP5201Row() {
                return ((P5201Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P5201Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P5201Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P5201RowChanged != null)) {
                    this.P5201RowChanged(this, new P5201RowChangeEvent(((P5201Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P5201RowChanging != null)) {
                    this.P5201RowChanging(this, new P5201RowChangeEvent(((P5201Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P5201RowDeleted != null)) {
                    this.P5201RowDeleted(this, new P5201RowChangeEvent(((P5201Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P5201RowDeleting != null)) {
                    this.P5201RowDeleting(this, new P5201RowChangeEvent(((P5201Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP5201Row(P5201Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P5201DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P5202DataTable : global::System.Data.TypedTableBase<P5202Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5202DataTable() {
                this.TableName = "P5202";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P5202DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P5202DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5202Row this[int index] {
                get {
                    return ((P5202Row)(this.Rows[index]));
                }
            }
            
            public event P5202RowChangeEventHandler P5202RowChanging;
            
            public event P5202RowChangeEventHandler P5202RowChanged;
            
            public event P5202RowChangeEventHandler P5202RowDeleting;
            
            public event P5202RowChangeEventHandler P5202RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP5202Row(P5202Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5202Row AddP5202Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P5202Row rowP5202Row = ((P5202Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP5202Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP5202Row);
                return rowP5202Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P5202DataTable cln = ((P5202DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P5202DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5202Row NewP5202Row() {
                return ((P5202Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P5202Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P5202Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P5202RowChanged != null)) {
                    this.P5202RowChanged(this, new P5202RowChangeEvent(((P5202Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P5202RowChanging != null)) {
                    this.P5202RowChanging(this, new P5202RowChangeEvent(((P5202Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P5202RowDeleted != null)) {
                    this.P5202RowDeleted(this, new P5202RowChangeEvent(((P5202Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P5202RowDeleting != null)) {
                    this.P5202RowDeleting(this, new P5202RowChangeEvent(((P5202Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP5202Row(P5202Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P5202DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P5203DataTable : global::System.Data.TypedTableBase<P5203Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5203DataTable() {
                this.TableName = "P5203";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P5203DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P5203DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5203Row this[int index] {
                get {
                    return ((P5203Row)(this.Rows[index]));
                }
            }
            
            public event P5203RowChangeEventHandler P5203RowChanging;
            
            public event P5203RowChangeEventHandler P5203RowChanged;
            
            public event P5203RowChangeEventHandler P5203RowDeleting;
            
            public event P5203RowChangeEventHandler P5203RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP5203Row(P5203Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5203Row AddP5203Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P5203Row rowP5203Row = ((P5203Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP5203Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP5203Row);
                return rowP5203Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P5203DataTable cln = ((P5203DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P5203DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5203Row NewP5203Row() {
                return ((P5203Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P5203Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P5203Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P5203RowChanged != null)) {
                    this.P5203RowChanged(this, new P5203RowChangeEvent(((P5203Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P5203RowChanging != null)) {
                    this.P5203RowChanging(this, new P5203RowChangeEvent(((P5203Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P5203RowDeleted != null)) {
                    this.P5203RowDeleted(this, new P5203RowChangeEvent(((P5203Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P5203RowDeleting != null)) {
                    this.P5203RowDeleting(this, new P5203RowChangeEvent(((P5203Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP5203Row(P5203Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P5203DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class P5204DataTable : global::System.Data.TypedTableBase<P5204Row> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5204DataTable() {
                this.TableName = "P5204";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P5204DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected P5204DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5204Row this[int index] {
                get {
                    return ((P5204Row)(this.Rows[index]));
                }
            }
            
            public event P5204RowChangeEventHandler P5204RowChanging;
            
            public event P5204RowChangeEventHandler P5204RowChanged;
            
            public event P5204RowChangeEventHandler P5204RowDeleting;
            
            public event P5204RowChangeEventHandler P5204RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddP5204Row(P5204Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5204Row AddP5204Row(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                P5204Row rowP5204Row = ((P5204Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowP5204Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowP5204Row);
                return rowP5204Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                P5204DataTable cln = ((P5204DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new P5204DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5204Row NewP5204Row() {
                return ((P5204Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new P5204Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(P5204Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.P5204RowChanged != null)) {
                    this.P5204RowChanged(this, new P5204RowChangeEvent(((P5204Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.P5204RowChanging != null)) {
                    this.P5204RowChanging(this, new P5204RowChangeEvent(((P5204Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.P5204RowDeleted != null)) {
                    this.P5204RowDeleted(this, new P5204RowChangeEvent(((P5204Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.P5204RowDeleting != null)) {
                    this.P5204RowDeleting(this, new P5204RowChangeEvent(((P5204Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveP5204Row(P5204Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "P5204DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SESSIONDataTable : global::System.Data.TypedTableBase<SESSIONRow> {
            
            private global::System.Data.DataColumn columnedit_id;
            
            private global::System.Data.DataColumn columnedit_date;
            
            private global::System.Data.DataColumn columnedited_by;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONDataTable() {
                this.TableName = "SESSION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SESSIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SESSIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_idColumn {
                get {
                    return this.columnedit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_dateColumn {
                get {
                    return this.columnedit_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edited_byColumn {
                get {
                    return this.columnedited_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow this[int index] {
                get {
                    return ((SESSIONRow)(this.Rows[index]));
                }
            }
            
            public event SESSIONRowChangeEventHandler SESSIONRowChanging;
            
            public event SESSIONRowChangeEventHandler SESSIONRowChanged;
            
            public event SESSIONRowChangeEventHandler SESSIONRowDeleting;
            
            public event SESSIONRowChangeEventHandler SESSIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSESSIONRow(SESSIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow AddSESSIONRow(int edit_id, System.DateTime edit_date, string edited_by) {
                SESSIONRow rowSESSIONRow = ((SESSIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        edit_id,
                        edit_date,
                        edited_by};
                rowSESSIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSESSIONRow);
                return rowSESSIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow FindByedit_id(int edit_id) {
                return ((SESSIONRow)(this.Rows.Find(new object[] {
                            edit_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SESSIONDataTable cln = ((SESSIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SESSIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnedit_id = base.Columns["edit_id"];
                this.columnedit_date = base.Columns["edit_date"];
                this.columnedited_by = base.Columns["edited_by"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnedit_id = new global::System.Data.DataColumn("edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_id);
                this.columnedit_date = new global::System.Data.DataColumn("edit_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_date);
                this.columnedited_by = new global::System.Data.DataColumn("edited_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedited_by);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnedit_id}, true));
                this.columnedit_id.AllowDBNull = false;
                this.columnedit_id.Unique = true;
                this.columnedit_date.AllowDBNull = false;
                this.columnedited_by.AllowDBNull = false;
                this.columnedited_by.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow NewSESSIONRow() {
                return ((SESSIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SESSIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SESSIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SESSIONRowChanged != null)) {
                    this.SESSIONRowChanged(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SESSIONRowChanging != null)) {
                    this.SESSIONRowChanging(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SESSIONRowDeleted != null)) {
                    this.SESSIONRowDeleted(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SESSIONRowDeleting != null)) {
                    this.SESSIONRowDeleting(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSESSIONRow(SESSIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SESSIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GwMonUpdaterDataTable : global::System.Data.TypedTableBase<GwMonUpdaterRow> {
            
            private global::System.Data.DataColumn columnreadingId;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columnheadPsi;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterDataTable() {
                this.TableName = "GwMonUpdater";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GwMonUpdaterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GwMonUpdaterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingIdColumn {
                get {
                    return this.columnreadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPsiColumn {
                get {
                    return this.columnheadPsi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow this[int index] {
                get {
                    return ((GwMonUpdaterRow)(this.Rows[index]));
                }
            }
            
            public event GwMonUpdaterRowChangeEventHandler GwMonUpdaterRowChanging;
            
            public event GwMonUpdaterRowChangeEventHandler GwMonUpdaterRowChanged;
            
            public event GwMonUpdaterRowChangeEventHandler GwMonUpdaterRowDeleting;
            
            public event GwMonUpdaterRowChangeEventHandler GwMonUpdaterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGwMonUpdaterRow(GwMonUpdaterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow AddGwMonUpdaterRow(int readingId, System.DateTime readingDate, double readingHertz, double headPsi, double tempCelsius) {
                GwMonUpdaterRow rowGwMonUpdaterRow = ((GwMonUpdaterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        readingId,
                        readingDate,
                        readingHertz,
                        headPsi,
                        tempCelsius};
                rowGwMonUpdaterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGwMonUpdaterRow);
                return rowGwMonUpdaterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow FindByreadingId(int readingId) {
                return ((GwMonUpdaterRow)(this.Rows.Find(new object[] {
                            readingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GwMonUpdaterDataTable cln = ((GwMonUpdaterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GwMonUpdaterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreadingId = base.Columns["readingId"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columnheadPsi = base.Columns["headPsi"];
                this.columntempCelsius = base.Columns["tempCelsius"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreadingId = new global::System.Data.DataColumn("readingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingId);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columnheadPsi = new global::System.Data.DataColumn("headPsi", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPsi);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnreadingId}, true));
                this.columnreadingId.AllowDBNull = false;
                this.columnreadingId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow NewGwMonUpdaterRow() {
                return ((GwMonUpdaterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GwMonUpdaterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GwMonUpdaterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GwMonUpdaterRowChanged != null)) {
                    this.GwMonUpdaterRowChanged(this, new GwMonUpdaterRowChangeEvent(((GwMonUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GwMonUpdaterRowChanging != null)) {
                    this.GwMonUpdaterRowChanging(this, new GwMonUpdaterRowChangeEvent(((GwMonUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GwMonUpdaterRowDeleted != null)) {
                    this.GwMonUpdaterRowDeleted(this, new GwMonUpdaterRowChangeEvent(((GwMonUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GwMonUpdaterRowDeleting != null)) {
                    this.GwMonUpdaterRowDeleting(this, new GwMonUpdaterRowChangeEvent(((GwMonUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGwMonUpdaterRow(GwMonUpdaterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GwMonUpdaterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TGD1ADataTable : global::System.Data.TypedTableBase<TGD1ARow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1ADataTable() {
                this.TableName = "TGD1A";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD1ADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TGD1ADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1ARow this[int index] {
                get {
                    return ((TGD1ARow)(this.Rows[index]));
                }
            }
            
            public event TGD1ARowChangeEventHandler TGD1ARowChanging;
            
            public event TGD1ARowChangeEventHandler TGD1ARowChanged;
            
            public event TGD1ARowChangeEventHandler TGD1ARowDeleting;
            
            public event TGD1ARowChangeEventHandler TGD1ARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTGD1ARow(TGD1ARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1ARow AddTGD1ARow(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                TGD1ARow rowTGD1ARow = ((TGD1ARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowTGD1ARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTGD1ARow);
                return rowTGD1ARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TGD1ADataTable cln = ((TGD1ADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TGD1ADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1ARow NewTGD1ARow() {
                return ((TGD1ARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TGD1ARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TGD1ARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TGD1ARowChanged != null)) {
                    this.TGD1ARowChanged(this, new TGD1ARowChangeEvent(((TGD1ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TGD1ARowChanging != null)) {
                    this.TGD1ARowChanging(this, new TGD1ARowChangeEvent(((TGD1ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TGD1ARowDeleted != null)) {
                    this.TGD1ARowDeleted(this, new TGD1ARowChangeEvent(((TGD1ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TGD1ARowDeleting != null)) {
                    this.TGD1ARowDeleting(this, new TGD1ARowChangeEvent(((TGD1ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTGD1ARow(TGD1ARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TGD1ADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TGD1BDataTable : global::System.Data.TypedTableBase<TGD1BRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnf2Scale;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1BDataTable() {
                this.TableName = "TGD1B";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD1BDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TGD1BDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn f2ScaleColumn {
                get {
                    return this.columnf2Scale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1BRow this[int index] {
                get {
                    return ((TGD1BRow)(this.Rows[index]));
                }
            }
            
            public event TGD1BRowChangeEventHandler TGD1BRowChanging;
            
            public event TGD1BRowChangeEventHandler TGD1BRowChanged;
            
            public event TGD1BRowChangeEventHandler TGD1BRowDeleting;
            
            public event TGD1BRowChangeEventHandler TGD1BRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTGD1BRow(TGD1BRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1BRow AddTGD1BRow(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double f2Scale, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                TGD1BRow rowTGD1BRow = ((TGD1BRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        f2Scale,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowTGD1BRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTGD1BRow);
                return rowTGD1BRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TGD1BDataTable cln = ((TGD1BDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TGD1BDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnf2Scale = base.Columns["f2Scale"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnf2Scale = new global::System.Data.DataColumn("f2Scale", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnf2Scale);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1BRow NewTGD1BRow() {
                return ((TGD1BRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TGD1BRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TGD1BRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TGD1BRowChanged != null)) {
                    this.TGD1BRowChanged(this, new TGD1BRowChangeEvent(((TGD1BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TGD1BRowChanging != null)) {
                    this.TGD1BRowChanging(this, new TGD1BRowChangeEvent(((TGD1BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TGD1BRowDeleted != null)) {
                    this.TGD1BRowDeleted(this, new TGD1BRowChangeEvent(((TGD1BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TGD1BRowDeleting != null)) {
                    this.TGD1BRowDeleting(this, new TGD1BRowChangeEvent(((TGD1BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTGD1BRow(TGD1BRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TGD1BDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TGD2ADataTable : global::System.Data.TypedTableBase<TGD2ARow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2ADataTable() {
                this.TableName = "TGD2A";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD2ADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TGD2ADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2ARow this[int index] {
                get {
                    return ((TGD2ARow)(this.Rows[index]));
                }
            }
            
            public event TGD2ARowChangeEventHandler TGD2ARowChanging;
            
            public event TGD2ARowChangeEventHandler TGD2ARowChanged;
            
            public event TGD2ARowChangeEventHandler TGD2ARowDeleting;
            
            public event TGD2ARowChangeEventHandler TGD2ARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTGD2ARow(TGD2ARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2ARow AddTGD2ARow(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                TGD2ARow rowTGD2ARow = ((TGD2ARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowTGD2ARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTGD2ARow);
                return rowTGD2ARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TGD2ADataTable cln = ((TGD2ADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TGD2ADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2ARow NewTGD2ARow() {
                return ((TGD2ARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TGD2ARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TGD2ARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TGD2ARowChanged != null)) {
                    this.TGD2ARowChanged(this, new TGD2ARowChangeEvent(((TGD2ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TGD2ARowChanging != null)) {
                    this.TGD2ARowChanging(this, new TGD2ARowChangeEvent(((TGD2ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TGD2ARowDeleted != null)) {
                    this.TGD2ARowDeleted(this, new TGD2ARowChangeEvent(((TGD2ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TGD2ARowDeleting != null)) {
                    this.TGD2ARowDeleting(this, new TGD2ARowChangeEvent(((TGD2ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTGD2ARow(TGD2ARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TGD2ADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TGD2BDataTable : global::System.Data.TypedTableBase<TGD2BRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2BDataTable() {
                this.TableName = "TGD2B";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD2BDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TGD2BDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2BRow this[int index] {
                get {
                    return ((TGD2BRow)(this.Rows[index]));
                }
            }
            
            public event TGD2BRowChangeEventHandler TGD2BRowChanging;
            
            public event TGD2BRowChangeEventHandler TGD2BRowChanged;
            
            public event TGD2BRowChangeEventHandler TGD2BRowDeleting;
            
            public event TGD2BRowChangeEventHandler TGD2BRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTGD2BRow(TGD2BRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2BRow AddTGD2BRow(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                TGD2BRow rowTGD2BRow = ((TGD2BRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowTGD2BRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTGD2BRow);
                return rowTGD2BRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TGD2BDataTable cln = ((TGD2BDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TGD2BDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2BRow NewTGD2BRow() {
                return ((TGD2BRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TGD2BRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TGD2BRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TGD2BRowChanged != null)) {
                    this.TGD2BRowChanged(this, new TGD2BRowChangeEvent(((TGD2BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TGD2BRowChanging != null)) {
                    this.TGD2BRowChanging(this, new TGD2BRowChangeEvent(((TGD2BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TGD2BRowDeleted != null)) {
                    this.TGD2BRowDeleted(this, new TGD2BRowChangeEvent(((TGD2BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TGD2BRowDeleting != null)) {
                    this.TGD2BRowDeleting(this, new TGD2BRowChangeEvent(((TGD2BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTGD2BRow(TGD2BRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TGD2BDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TGD3ADataTable : global::System.Data.TypedTableBase<TGD3ARow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3ADataTable() {
                this.TableName = "TGD3A";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD3ADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TGD3ADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3ARow this[int index] {
                get {
                    return ((TGD3ARow)(this.Rows[index]));
                }
            }
            
            public event TGD3ARowChangeEventHandler TGD3ARowChanging;
            
            public event TGD3ARowChangeEventHandler TGD3ARowChanged;
            
            public event TGD3ARowChangeEventHandler TGD3ARowDeleting;
            
            public event TGD3ARowChangeEventHandler TGD3ARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTGD3ARow(TGD3ARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3ARow AddTGD3ARow(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                TGD3ARow rowTGD3ARow = ((TGD3ARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowTGD3ARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTGD3ARow);
                return rowTGD3ARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TGD3ADataTable cln = ((TGD3ADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TGD3ADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3ARow NewTGD3ARow() {
                return ((TGD3ARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TGD3ARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TGD3ARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TGD3ARowChanged != null)) {
                    this.TGD3ARowChanged(this, new TGD3ARowChangeEvent(((TGD3ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TGD3ARowChanging != null)) {
                    this.TGD3ARowChanging(this, new TGD3ARowChangeEvent(((TGD3ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TGD3ARowDeleted != null)) {
                    this.TGD3ARowDeleted(this, new TGD3ARowChangeEvent(((TGD3ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TGD3ARowDeleting != null)) {
                    this.TGD3ARowDeleting(this, new TGD3ARowChangeEvent(((TGD3ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTGD3ARow(TGD3ARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TGD3ADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TGD3BDataTable : global::System.Data.TypedTableBase<TGD3BRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsensorID;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            private global::System.Data.DataColumn columnf2Scale;
            
            private global::System.Data.DataColumn columnheadPSI;
            
            private global::System.Data.DataColumn columnheadFeet;
            
            private global::System.Data.DataColumn columngwDepth;
            
            private global::System.Data.DataColumn columngwElevation;
            
            private global::System.Data.DataColumn columngwMin;
            
            private global::System.Data.DataColumn columngwMax;
            
            private global::System.Data.DataColumn columngroundElevation;
            
            private global::System.Data.DataColumn columndataQualFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3BDataTable() {
                this.TableName = "TGD3B";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD3BDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TGD3BDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorIDColumn {
                get {
                    return this.columnsensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn f2ScaleColumn {
                get {
                    return this.columnf2Scale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPSIColumn {
                get {
                    return this.columnheadPSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headFeetColumn {
                get {
                    return this.columnheadFeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwDepthColumn {
                get {
                    return this.columngwDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwElevationColumn {
                get {
                    return this.columngwElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMinColumn {
                get {
                    return this.columngwMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMaxColumn {
                get {
                    return this.columngwMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevationColumn {
                get {
                    return this.columngroundElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataQualFlagColumn {
                get {
                    return this.columndataQualFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3BRow this[int index] {
                get {
                    return ((TGD3BRow)(this.Rows[index]));
                }
            }
            
            public event TGD3BRowChangeEventHandler TGD3BRowChanging;
            
            public event TGD3BRowChangeEventHandler TGD3BRowChanged;
            
            public event TGD3BRowChangeEventHandler TGD3BRowDeleting;
            
            public event TGD3BRowChangeEventHandler TGD3BRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTGD3BRow(TGD3BRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3BRow AddTGD3BRow(double id, string sensorID, System.DateTime readingDate, double readingHertz, double tempCelsius, double f2Scale, double headPSI, double headFeet, double gwDepth, double gwElevation, double gwMin, double gwMax, double groundElevation, string dataQualFlag) {
                TGD3BRow rowTGD3BRow = ((TGD3BRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sensorID,
                        readingDate,
                        readingHertz,
                        tempCelsius,
                        f2Scale,
                        headPSI,
                        headFeet,
                        gwDepth,
                        gwElevation,
                        gwMin,
                        gwMax,
                        groundElevation,
                        dataQualFlag};
                rowTGD3BRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTGD3BRow);
                return rowTGD3BRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TGD3BDataTable cln = ((TGD3BDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TGD3BDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsensorID = base.Columns["sensorID"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columntempCelsius = base.Columns["tempCelsius"];
                this.columnf2Scale = base.Columns["f2Scale"];
                this.columnheadPSI = base.Columns["headPSI"];
                this.columnheadFeet = base.Columns["headFeet"];
                this.columngwDepth = base.Columns["gwDepth"];
                this.columngwElevation = base.Columns["gwElevation"];
                this.columngwMin = base.Columns["gwMin"];
                this.columngwMax = base.Columns["gwMax"];
                this.columngroundElevation = base.Columns["groundElevation"];
                this.columndataQualFlag = base.Columns["dataQualFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsensorID = new global::System.Data.DataColumn("sensorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensorID);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
                this.columnf2Scale = new global::System.Data.DataColumn("f2Scale", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnf2Scale);
                this.columnheadPSI = new global::System.Data.DataColumn("headPSI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPSI);
                this.columnheadFeet = new global::System.Data.DataColumn("headFeet", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadFeet);
                this.columngwDepth = new global::System.Data.DataColumn("gwDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwDepth);
                this.columngwElevation = new global::System.Data.DataColumn("gwElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwElevation);
                this.columngwMin = new global::System.Data.DataColumn("gwMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMin);
                this.columngwMax = new global::System.Data.DataColumn("gwMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMax);
                this.columngroundElevation = new global::System.Data.DataColumn("groundElevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevation);
                this.columndataQualFlag = new global::System.Data.DataColumn("dataQualFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataQualFlag);
                this.columnsensorID.MaxLength = 255;
                this.columndataQualFlag.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3BRow NewTGD3BRow() {
                return ((TGD3BRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TGD3BRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TGD3BRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TGD3BRowChanged != null)) {
                    this.TGD3BRowChanged(this, new TGD3BRowChangeEvent(((TGD3BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TGD3BRowChanging != null)) {
                    this.TGD3BRowChanging(this, new TGD3BRowChangeEvent(((TGD3BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TGD3BRowDeleted != null)) {
                    this.TGD3BRowDeleted(this, new TGD3BRowChangeEvent(((TGD3BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TGD3BRowDeleting != null)) {
                    this.TGD3BRowDeleting(this, new TGD3BRowChangeEvent(((TGD3BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTGD3BRow(TGD3BRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TGD3BDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GwMonQcDataTable : global::System.Data.TypedTableBase<GwMonQcRow> {
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnGwMonError;
            
            private global::System.Data.DataColumn columnErrorDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcDataTable() {
                this.TableName = "GwMonQc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GwMonQcDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GwMonQcDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GwMonErrorColumn {
                get {
                    return this.columnGwMonError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorDescriptionColumn {
                get {
                    return this.columnErrorDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow this[int index] {
                get {
                    return ((GwMonQcRow)(this.Rows[index]));
                }
            }
            
            public event GwMonQcRowChangeEventHandler GwMonQcRowChanging;
            
            public event GwMonQcRowChangeEventHandler GwMonQcRowChanged;
            
            public event GwMonQcRowChangeEventHandler GwMonQcRowDeleting;
            
            public event GwMonQcRowChangeEventHandler GwMonQcRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGwMonQcRow(GwMonQcRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow AddGwMonQcRow(string readingDate, string GwMonError, string ErrorDescription) {
                GwMonQcRow rowGwMonQcRow = ((GwMonQcRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        readingDate,
                        GwMonError,
                        ErrorDescription};
                rowGwMonQcRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGwMonQcRow);
                return rowGwMonQcRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GwMonQcDataTable cln = ((GwMonQcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GwMonQcDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnGwMonError = base.Columns["GwMonError"];
                this.columnErrorDescription = base.Columns["ErrorDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnGwMonError = new global::System.Data.DataColumn("GwMonError", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGwMonError);
                this.columnErrorDescription = new global::System.Data.DataColumn("ErrorDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorDescription);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow NewGwMonQcRow() {
                return ((GwMonQcRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GwMonQcRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GwMonQcRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GwMonQcRowChanged != null)) {
                    this.GwMonQcRowChanged(this, new GwMonQcRowChangeEvent(((GwMonQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GwMonQcRowChanging != null)) {
                    this.GwMonQcRowChanging(this, new GwMonQcRowChangeEvent(((GwMonQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GwMonQcRowDeleted != null)) {
                    this.GwMonQcRowDeleted(this, new GwMonQcRowChangeEvent(((GwMonQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GwMonQcRowDeleting != null)) {
                    this.GwMonQcRowDeleting(this, new GwMonQcRowChangeEvent(((GwMonQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGwMonQcRow(GwMonQcRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GwMonQcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GW_MONITORINGRow : global::System.Data.DataRow {
            
            private GW_MONITORINGDataTable tableGW_MONITORING;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GW_MONITORINGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGW_MONITORING = ((GW_MONITORINGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int gwmon_edit_id {
                get {
                    return ((int)(this[this.tableGW_MONITORING.gwmon_edit_idColumn]));
                }
                set {
                    this[this.tableGW_MONITORING.gwmon_edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_id {
                get {
                    return ((int)(this[this.tableGW_MONITORING.edit_idColumn]));
                }
                set {
                    this[this.tableGW_MONITORING.edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime edit_date {
                get {
                    return ((global::System.DateTime)(this[this.tableGW_MONITORING.edit_dateColumn]));
                }
                set {
                    this[this.tableGW_MONITORING.edit_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edited_by {
                get {
                    return ((string)(this[this.tableGW_MONITORING.edited_byColumn]));
                }
                set {
                    this[this.tableGW_MONITORING.edited_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime reading_date {
                get {
                    return ((global::System.DateTime)(this[this.tableGW_MONITORING.reading_dateColumn]));
                }
                set {
                    this[this.tableGW_MONITORING.reading_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double reading_hertz {
                get {
                    return ((double)(this[this.tableGW_MONITORING.reading_hertzColumn]));
                }
                set {
                    this[this.tableGW_MONITORING.reading_hertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double heas_psi {
                get {
                    try {
                        return ((double)(this[this.tableGW_MONITORING.heas_psiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'heas_psi\' in table \'GW_MONITORING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITORING.heas_psiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double temp_celsius {
                get {
                    try {
                        return ((double)(this[this.tableGW_MONITORING.temp_celsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp_celsius\' in table \'GW_MONITORING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITORING.temp_celsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheas_psiNull() {
                return this.IsNull(this.tableGW_MONITORING.heas_psiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheas_psiNull() {
                this[this.tableGW_MONITORING.heas_psiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istemp_celsiusNull() {
                return this.IsNull(this.tableGW_MONITORING.temp_celsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settemp_celsiusNull() {
                this[this.tableGW_MONITORING.temp_celsiusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MONITOR_LOCATIONSRow : global::System.Data.DataRow {
            
            private MONITOR_LOCATIONSDataTable tableMONITOR_LOCATIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MONITOR_LOCATIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMONITOR_LOCATIONS = ((MONITOR_LOCATIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_id {
                get {
                    return ((string)(this[this.tableMONITOR_LOCATIONS.sensor_idColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_name {
                get {
                    return ((string)(this[this.tableMONITOR_LOCATIONS.sensor_nameColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.sensor_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string serial_num {
                get {
                    try {
                        return ((string)(this[this.tableMONITOR_LOCATIONS.serial_numColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'serial_num\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.serial_numColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double sensor_depth_ft {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.sensor_depth_ftColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.sensor_depth_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double measure_down_ft {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.measure_down_ftColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.measure_down_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double toc_elev_ft {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.toc_elev_ftColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.toc_elev_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_psi_a {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_psi_aColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_psi_aColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_psi_b {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_psi_bColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_psi_bColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_psi_c {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_psi_cColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_psi_cColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_head_ft_a {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_aColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_aColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_head_ft_b {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_bColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_bColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_head_ft_c {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_cColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_cColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double northing_ft {
                get {
                    try {
                        return ((double)(this[this.tableMONITOR_LOCATIONS.northing_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'northing_ft\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.northing_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double easting_ft {
                get {
                    try {
                        return ((double)(this[this.tableMONITOR_LOCATIONS.easting_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'easting_ft\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.easting_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notes {
                get {
                    try {
                        return ((string)(this[this.tableMONITOR_LOCATIONS.notesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notes\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.notesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isserial_numNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.serial_numColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setserial_numNull() {
                this[this.tableMONITOR_LOCATIONS.serial_numColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnorthing_ftNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.northing_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnorthing_ftNull() {
                this[this.tableMONITOR_LOCATIONS.northing_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iseasting_ftNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.easting_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Seteasting_ftNull() {
                this[this.tableMONITOR_LOCATIONS.easting_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnotesNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.notesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnotesNull() {
                this[this.tableMONITOR_LOCATIONS.notesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P1401Row : global::System.Data.DataRow {
            
            private P1401DataTable tableP1401;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P1401Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP1401 = ((P1401DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP1401.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP1401.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP1401.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP1401.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP1401.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP1401.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP1401.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP1401.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP1401.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP1401.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP1401.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP1401.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP1401.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P1401\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1401.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP1401.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP1401.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP1401.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP1401.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP1401.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP1401.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP1401.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP1401.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP1401.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP1401.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP1401.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP1401.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP1401.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP1401.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP1401.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP1401.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP1401.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP1401.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP1401.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP1401.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP1401.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP1401.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP1401.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP1401.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP1401.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP1401.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P1402Row : global::System.Data.DataRow {
            
            private P1402DataTable tableP1402;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P1402Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP1402 = ((P1402DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP1402.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP1402.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP1402.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP1402.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP1402.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP1402.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP1402.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP1402.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP1402.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP1402.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP1402.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP1402.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP1402.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P1402\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP1402.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP1402.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP1402.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP1402.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP1402.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP1402.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP1402.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP1402.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP1402.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP1402.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP1402.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP1402.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP1402.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP1402.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP1402.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP1402.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP1402.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP1402.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP1402.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP1402.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP1402.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP1402.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP1402.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP1402.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP1402.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP1402.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP1402.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P4501Row : global::System.Data.DataRow {
            
            private P4501DataTable tableP4501;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4501Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP4501 = ((P4501DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP4501.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP4501.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP4501.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP4501.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP4501.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP4501.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP4501.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP4501.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4501.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP4501.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP4501.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4501.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP4501.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P4501\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4501.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP4501.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP4501.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP4501.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP4501.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP4501.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP4501.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP4501.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP4501.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP4501.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP4501.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP4501.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP4501.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP4501.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP4501.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP4501.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP4501.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP4501.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP4501.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP4501.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP4501.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP4501.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP4501.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP4501.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP4501.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP4501.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP4501.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P4502Row : global::System.Data.DataRow {
            
            private P4502DataTable tableP4502;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4502Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP4502 = ((P4502DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP4502.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP4502.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP4502.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP4502.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP4502.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP4502.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP4502.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP4502.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4502.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP4502.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP4502.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4502.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP4502.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P4502\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4502.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP4502.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP4502.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP4502.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP4502.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP4502.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP4502.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP4502.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP4502.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP4502.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP4502.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP4502.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP4502.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP4502.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP4502.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP4502.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP4502.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP4502.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP4502.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP4502.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP4502.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP4502.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP4502.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP4502.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP4502.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP4502.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP4502.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P4503Row : global::System.Data.DataRow {
            
            private P4503DataTable tableP4503;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4503Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP4503 = ((P4503DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP4503.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP4503.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP4503.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP4503.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP4503.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP4503.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP4503.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP4503.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4503.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP4503.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP4503.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4503.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP4503.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P4503\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4503.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP4503.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP4503.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP4503.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP4503.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP4503.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP4503.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP4503.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP4503.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP4503.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP4503.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP4503.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP4503.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP4503.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP4503.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP4503.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP4503.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP4503.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP4503.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP4503.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP4503.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP4503.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP4503.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP4503.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP4503.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP4503.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP4503.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P4504Row : global::System.Data.DataRow {
            
            private P4504DataTable tableP4504;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4504Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP4504 = ((P4504DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP4504.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP4504.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP4504.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP4504.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP4504.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP4504.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP4504.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP4504.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4504.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP4504.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP4504.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4504.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP4504.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P4504\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4504.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP4504.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP4504.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP4504.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP4504.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP4504.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP4504.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP4504.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP4504.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP4504.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP4504.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP4504.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP4504.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP4504.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP4504.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP4504.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP4504.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP4504.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP4504.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP4504.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP4504.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP4504.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP4504.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP4504.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP4504.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP4504.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP4504.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P4505Row : global::System.Data.DataRow {
            
            private P4505DataTable tableP4505;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P4505Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP4505 = ((P4505DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP4505.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP4505.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP4505.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP4505.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP4505.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP4505.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP4505.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP4505.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4505.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP4505.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP4505.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP4505.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP4505.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P4505\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP4505.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP4505.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP4505.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP4505.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP4505.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP4505.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP4505.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP4505.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP4505.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP4505.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP4505.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP4505.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP4505.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP4505.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP4505.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP4505.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP4505.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP4505.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP4505.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP4505.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP4505.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP4505.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP4505.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP4505.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP4505.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP4505.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP4505.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P5201Row : global::System.Data.DataRow {
            
            private P5201DataTable tableP5201;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P5201Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP5201 = ((P5201DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP5201.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP5201.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP5201.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP5201.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP5201.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP5201.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP5201.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP5201.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP5201.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP5201.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP5201.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP5201.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP5201.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P5201\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5201.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP5201.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP5201.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP5201.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP5201.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP5201.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP5201.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP5201.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP5201.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP5201.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP5201.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP5201.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP5201.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP5201.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP5201.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP5201.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP5201.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP5201.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP5201.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP5201.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP5201.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP5201.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP5201.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP5201.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP5201.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP5201.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP5201.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P5202Row : global::System.Data.DataRow {
            
            private P5202DataTable tableP5202;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P5202Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP5202 = ((P5202DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP5202.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP5202.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP5202.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP5202.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP5202.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP5202.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP5202.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP5202.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP5202.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP5202.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP5202.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP5202.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP5202.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P5202\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5202.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP5202.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP5202.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP5202.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP5202.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP5202.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP5202.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP5202.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP5202.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP5202.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP5202.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP5202.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP5202.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP5202.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP5202.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP5202.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP5202.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP5202.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP5202.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP5202.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP5202.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP5202.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP5202.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP5202.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP5202.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP5202.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP5202.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P5203Row : global::System.Data.DataRow {
            
            private P5203DataTable tableP5203;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P5203Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP5203 = ((P5203DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP5203.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP5203.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP5203.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP5203.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP5203.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP5203.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP5203.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP5203.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP5203.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP5203.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP5203.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP5203.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP5203.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P5203\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5203.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP5203.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP5203.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP5203.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP5203.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP5203.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP5203.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP5203.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP5203.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP5203.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP5203.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP5203.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP5203.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP5203.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP5203.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP5203.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP5203.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP5203.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP5203.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP5203.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP5203.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP5203.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP5203.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP5203.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP5203.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP5203.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP5203.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class P5204Row : global::System.Data.DataRow {
            
            private P5204DataTable tableP5204;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal P5204Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableP5204 = ((P5204DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableP5204.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableP5204.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableP5204.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableP5204.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableP5204.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableP5204.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableP5204.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableP5204.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableP5204.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableP5204.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableP5204.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableP5204.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableP5204.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'P5204\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableP5204.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableP5204.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableP5204.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableP5204.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableP5204.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableP5204.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableP5204.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableP5204.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableP5204.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableP5204.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableP5204.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableP5204.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableP5204.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableP5204.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableP5204.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableP5204.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableP5204.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableP5204.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableP5204.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableP5204.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableP5204.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableP5204.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableP5204.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableP5204.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableP5204.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableP5204.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableP5204.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SESSIONRow : global::System.Data.DataRow {
            
            private SESSIONDataTable tableSESSION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SESSIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSESSION = ((SESSIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_id {
                get {
                    return ((int)(this[this.tableSESSION.edit_idColumn]));
                }
                set {
                    this[this.tableSESSION.edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime edit_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSESSION.edit_dateColumn]));
                }
                set {
                    this[this.tableSESSION.edit_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edited_by {
                get {
                    return ((string)(this[this.tableSESSION.edited_byColumn]));
                }
                set {
                    this[this.tableSESSION.edited_byColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GwMonUpdaterRow : global::System.Data.DataRow {
            
            private GwMonUpdaterDataTable tableGwMonUpdater;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GwMonUpdaterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGwMonUpdater = ((GwMonUpdaterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int readingId {
                get {
                    return ((int)(this[this.tableGwMonUpdater.readingIdColumn]));
                }
                set {
                    this[this.tableGwMonUpdater.readingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGwMonUpdater.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableGwMonUpdater.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPsi {
                get {
                    try {
                        return ((double)(this[this.tableGwMonUpdater.headPsiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPsi\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.headPsiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableGwMonUpdater.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableGwMonUpdater.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableGwMonUpdater.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableGwMonUpdater.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableGwMonUpdater.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPsiNull() {
                return this.IsNull(this.tableGwMonUpdater.headPsiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPsiNull() {
                this[this.tableGwMonUpdater.headPsiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableGwMonUpdater.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableGwMonUpdater.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TGD1ARow : global::System.Data.DataRow {
            
            private TGD1ADataTable tableTGD1A;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD1ARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTGD1A = ((TGD1ADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableTGD1A.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTGD1A.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD1A.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableTGD1A.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'TGD1A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1A.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableTGD1A.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableTGD1A.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableTGD1A.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableTGD1A.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableTGD1A.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableTGD1A.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableTGD1A.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableTGD1A.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableTGD1A.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableTGD1A.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableTGD1A.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableTGD1A.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableTGD1A.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableTGD1A.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableTGD1A.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableTGD1A.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableTGD1A.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableTGD1A.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableTGD1A.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableTGD1A.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableTGD1A.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableTGD1A.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableTGD1A.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableTGD1A.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableTGD1A.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableTGD1A.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TGD1BRow : global::System.Data.DataRow {
            
            private TGD1BDataTable tableTGD1B;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD1BRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTGD1B = ((TGD1BDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableTGD1B.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTGD1B.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double f2Scale {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.f2ScaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'f2Scale\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.f2ScaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD1B.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableTGD1B.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'TGD1B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD1B.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableTGD1B.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableTGD1B.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableTGD1B.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableTGD1B.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableTGD1B.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableTGD1B.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableTGD1B.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableTGD1B.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableTGD1B.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableTGD1B.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isf2ScaleNull() {
                return this.IsNull(this.tableTGD1B.f2ScaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setf2ScaleNull() {
                this[this.tableTGD1B.f2ScaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableTGD1B.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableTGD1B.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableTGD1B.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableTGD1B.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableTGD1B.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableTGD1B.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableTGD1B.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableTGD1B.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableTGD1B.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableTGD1B.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableTGD1B.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableTGD1B.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableTGD1B.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableTGD1B.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableTGD1B.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableTGD1B.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TGD2ARow : global::System.Data.DataRow {
            
            private TGD2ADataTable tableTGD2A;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD2ARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTGD2A = ((TGD2ADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableTGD2A.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTGD2A.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD2A.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableTGD2A.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'TGD2A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2A.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableTGD2A.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableTGD2A.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableTGD2A.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableTGD2A.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableTGD2A.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableTGD2A.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableTGD2A.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableTGD2A.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableTGD2A.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableTGD2A.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableTGD2A.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableTGD2A.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableTGD2A.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableTGD2A.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableTGD2A.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableTGD2A.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableTGD2A.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableTGD2A.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableTGD2A.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableTGD2A.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableTGD2A.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableTGD2A.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableTGD2A.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableTGD2A.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableTGD2A.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableTGD2A.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TGD2BRow : global::System.Data.DataRow {
            
            private TGD2BDataTable tableTGD2B;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD2BRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTGD2B = ((TGD2BDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableTGD2B.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTGD2B.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD2B.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableTGD2B.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'TGD2B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD2B.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableTGD2B.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableTGD2B.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableTGD2B.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableTGD2B.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableTGD2B.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableTGD2B.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableTGD2B.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableTGD2B.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableTGD2B.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableTGD2B.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableTGD2B.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableTGD2B.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableTGD2B.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableTGD2B.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableTGD2B.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableTGD2B.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableTGD2B.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableTGD2B.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableTGD2B.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableTGD2B.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableTGD2B.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableTGD2B.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableTGD2B.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableTGD2B.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableTGD2B.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableTGD2B.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TGD3ARow : global::System.Data.DataRow {
            
            private TGD3ADataTable tableTGD3A;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD3ARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTGD3A = ((TGD3ADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableTGD3A.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTGD3A.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD3A.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableTGD3A.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'TGD3A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3A.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableTGD3A.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableTGD3A.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableTGD3A.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableTGD3A.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableTGD3A.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableTGD3A.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableTGD3A.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableTGD3A.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableTGD3A.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableTGD3A.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableTGD3A.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableTGD3A.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableTGD3A.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableTGD3A.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableTGD3A.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableTGD3A.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableTGD3A.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableTGD3A.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableTGD3A.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableTGD3A.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableTGD3A.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableTGD3A.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableTGD3A.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableTGD3A.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableTGD3A.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableTGD3A.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TGD3BRow : global::System.Data.DataRow {
            
            private TGD3BDataTable tableTGD3B;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TGD3BRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTGD3B = ((TGD3BDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double id {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensorID {
                get {
                    try {
                        return ((string)(this[this.tableTGD3B.sensorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensorID\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.sensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTGD3B.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double f2Scale {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.f2ScaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'f2Scale\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.f2ScaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPSI {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.headPSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPSI\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.headPSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headFeet {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.headFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headFeet\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.headFeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwDepth {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.gwDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwDepth\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.gwDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.gwElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwElevation\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.gwElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMin {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.gwMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMin\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.gwMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gwMax {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.gwMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMax\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.gwMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevation {
                get {
                    try {
                        return ((double)(this[this.tableTGD3B.groundElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevation\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.groundElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataQualFlag {
                get {
                    try {
                        return ((string)(this[this.tableTGD3B.dataQualFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dataQualFlag\' in table \'TGD3B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTGD3B.dataQualFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableTGD3B.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableTGD3B.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorIDNull() {
                return this.IsNull(this.tableTGD3B.sensorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorIDNull() {
                this[this.tableTGD3B.sensorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableTGD3B.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableTGD3B.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableTGD3B.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableTGD3B.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableTGD3B.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableTGD3B.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isf2ScaleNull() {
                return this.IsNull(this.tableTGD3B.f2ScaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setf2ScaleNull() {
                this[this.tableTGD3B.f2ScaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPSINull() {
                return this.IsNull(this.tableTGD3B.headPSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPSINull() {
                this[this.tableTGD3B.headPSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadFeetNull() {
                return this.IsNull(this.tableTGD3B.headFeetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadFeetNull() {
                this[this.tableTGD3B.headFeetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwDepthNull() {
                return this.IsNull(this.tableTGD3B.gwDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwDepthNull() {
                this[this.tableTGD3B.gwDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwElevationNull() {
                return this.IsNull(this.tableTGD3B.gwElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwElevationNull() {
                this[this.tableTGD3B.gwElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMinNull() {
                return this.IsNull(this.tableTGD3B.gwMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMinNull() {
                this[this.tableTGD3B.gwMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMaxNull() {
                return this.IsNull(this.tableTGD3B.gwMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMaxNull() {
                this[this.tableTGD3B.gwMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevationNull() {
                return this.IsNull(this.tableTGD3B.groundElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevationNull() {
                this[this.tableTGD3B.groundElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataQualFlagNull() {
                return this.IsNull(this.tableTGD3B.dataQualFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataQualFlagNull() {
                this[this.tableTGD3B.dataQualFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GwMonQcRow : global::System.Data.DataRow {
            
            private GwMonQcDataTable tableGwMonQc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GwMonQcRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGwMonQc = ((GwMonQcDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string readingDate {
                get {
                    try {
                        return ((string)(this[this.tableGwMonQc.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'GwMonQc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonQc.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GwMonError {
                get {
                    try {
                        return ((string)(this[this.tableGwMonQc.GwMonErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GwMonError\' in table \'GwMonQc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonQc.GwMonErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorDescription {
                get {
                    try {
                        return ((string)(this[this.tableGwMonQc.ErrorDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorDescription\' in table \'GwMonQc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonQc.ErrorDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableGwMonQc.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableGwMonQc.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGwMonErrorNull() {
                return this.IsNull(this.tableGwMonQc.GwMonErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGwMonErrorNull() {
                this[this.tableGwMonQc.GwMonErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorDescriptionNull() {
                return this.IsNull(this.tableGwMonQc.ErrorDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorDescriptionNull() {
                this[this.tableGwMonQc.ErrorDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GW_MONITORINGRowChangeEvent : global::System.EventArgs {
            
            private GW_MONITORINGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITORINGRowChangeEvent(GW_MONITORINGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITORINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MONITOR_LOCATIONSRowChangeEvent : global::System.EventArgs {
            
            private MONITOR_LOCATIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRowChangeEvent(MONITOR_LOCATIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P1401RowChangeEvent : global::System.EventArgs {
            
            private P1401Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1401RowChangeEvent(P1401Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1401Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P1402RowChangeEvent : global::System.EventArgs {
            
            private P1402Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1402RowChangeEvent(P1402Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P1402Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P4501RowChangeEvent : global::System.EventArgs {
            
            private P4501Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4501RowChangeEvent(P4501Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4501Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P4502RowChangeEvent : global::System.EventArgs {
            
            private P4502Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4502RowChangeEvent(P4502Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4502Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P4503RowChangeEvent : global::System.EventArgs {
            
            private P4503Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4503RowChangeEvent(P4503Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4503Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P4504RowChangeEvent : global::System.EventArgs {
            
            private P4504Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4504RowChangeEvent(P4504Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4504Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P4505RowChangeEvent : global::System.EventArgs {
            
            private P4505Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4505RowChangeEvent(P4505Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P4505Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P5201RowChangeEvent : global::System.EventArgs {
            
            private P5201Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5201RowChangeEvent(P5201Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5201Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P5202RowChangeEvent : global::System.EventArgs {
            
            private P5202Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5202RowChangeEvent(P5202Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5202Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P5203RowChangeEvent : global::System.EventArgs {
            
            private P5203Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5203RowChangeEvent(P5203Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5203Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class P5204RowChangeEvent : global::System.EventArgs {
            
            private P5204Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5204RowChangeEvent(P5204Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public P5204Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SESSIONRowChangeEvent : global::System.EventArgs {
            
            private SESSIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRowChangeEvent(SESSIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GwMonUpdaterRowChangeEvent : global::System.EventArgs {
            
            private GwMonUpdaterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRowChangeEvent(GwMonUpdaterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TGD1ARowChangeEvent : global::System.EventArgs {
            
            private TGD1ARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1ARowChangeEvent(TGD1ARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1ARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TGD1BRowChangeEvent : global::System.EventArgs {
            
            private TGD1BRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1BRowChangeEvent(TGD1BRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD1BRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TGD2ARowChangeEvent : global::System.EventArgs {
            
            private TGD2ARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2ARowChangeEvent(TGD2ARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2ARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TGD2BRowChangeEvent : global::System.EventArgs {
            
            private TGD2BRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2BRowChangeEvent(TGD2BRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD2BRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TGD3ARowChangeEvent : global::System.EventArgs {
            
            private TGD3ARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3ARowChangeEvent(TGD3ARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3ARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TGD3BRowChangeEvent : global::System.EventArgs {
            
            private TGD3BRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3BRowChangeEvent(TGD3BRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TGD3BRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GwMonQcRowChangeEvent : global::System.EventArgs {
            
            private GwMonQcRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRowChangeEvent(GwMonQcRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GMonGr.GroundwaterMonitorDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GW_MONITORINGTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GW_MONITORINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GW_MONITORING";
            tableMapping.ColumnMappings.Add("gwmon_edit_id", "gwmon_edit_id");
            tableMapping.ColumnMappings.Add("edit_id", "edit_id");
            tableMapping.ColumnMappings.Add("edit_date", "edit_date");
            tableMapping.ColumnMappings.Add("edited_by", "edited_by");
            tableMapping.ColumnMappings.Add("reading_date", "reading_date");
            tableMapping.ColumnMappings.Add("reading_hertz", "reading_hertz");
            tableMapping.ColumnMappings.Add("heas_psi", "heas_psi");
            tableMapping.ColumnMappings.Add("temp_celsius", "temp_celsius");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GW_MONITORING] ([gwmon_edit_id], [edit_id], [edit_date], [edited_by], [reading_date], [reading_hertz], [heas_psi], [temp_celsius]) VALUES (@gwmon_edit_id, @edit_id, @edit_date, @edited_by, @reading_date, @reading_hertz, @heas_psi, @temp_celsius)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwmon_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwmon_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_hertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_hertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@heas_psi", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "heas_psi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp_celsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp_celsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     GW_MONITORING.*\r\nFROM         GW_MONITORING";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.GW_MONITORINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.GW_MONITORINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.GW_MONITORINGDataTable dataTable = new GroundwaterMonitorDataSet.GW_MONITORINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.GW_MONITORINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "GW_MONITORING");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int gwmon_edit_id, int edit_id, System.DateTime edit_date, string edited_by, System.DateTime reading_date, double reading_hertz, global::System.Nullable<double> heas_psi, global::System.Nullable<double> temp_celsius) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(gwmon_edit_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(edit_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(edited_by));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(reading_date));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(reading_hertz));
            if ((heas_psi.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(heas_psi.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((temp_celsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(temp_celsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MONITOR_LOCATIONSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MONITOR_LOCATIONSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MONITOR_LOCATIONS";
            tableMapping.ColumnMappings.Add("sensor_id", "sensor_id");
            tableMapping.ColumnMappings.Add("sensor_name", "sensor_name");
            tableMapping.ColumnMappings.Add("serial_num", "serial_num");
            tableMapping.ColumnMappings.Add("sensor_depth_ft", "sensor_depth_ft");
            tableMapping.ColumnMappings.Add("measure_down_ft", "measure_down_ft");
            tableMapping.ColumnMappings.Add("toc_elev_ft", "toc_elev_ft");
            tableMapping.ColumnMappings.Add("cal_fact_psi_a", "cal_fact_psi_a");
            tableMapping.ColumnMappings.Add("cal_fact_psi_b", "cal_fact_psi_b");
            tableMapping.ColumnMappings.Add("cal_fact_psi_c", "cal_fact_psi_c");
            tableMapping.ColumnMappings.Add("cal_fact_head_ft_a", "cal_fact_head_ft_a");
            tableMapping.ColumnMappings.Add("cal_fact_head_ft_b", "cal_fact_head_ft_b");
            tableMapping.ColumnMappings.Add("cal_fact_head_ft_c", "cal_fact_head_ft_c");
            tableMapping.ColumnMappings.Add("northing_ft", "northing_ft");
            tableMapping.ColumnMappings.Add("easting_ft", "easting_ft");
            tableMapping.ColumnMappings.Add("notes", "notes");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [MONITOR_LOCATIONS] ([sensor_id], [sensor_name], [serial_num], [sensor_depth_ft], [measure_down_ft], [toc_elev_ft], [cal_fact_psi_a], [cal_fact_psi_b], [cal_fact_psi_c], [cal_fact_head_ft_a], [cal_fact_head_ft_b], [cal_fact_head_ft_c], [northing_ft], [easting_ft], [notes]) VALUES (@sensor_id, @sensor_name, @serial_num, @sensor_depth_ft, @measure_down_ft, @toc_elev_ft, @cal_fact_psi_a, @cal_fact_psi_b, @cal_fact_psi_c, @cal_fact_head_ft_a, @cal_fact_head_ft_b, @cal_fact_head_ft_c, @northing_ft, @easting_ft, @notes)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serial_num", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "serial_num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_depth_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@measure_down_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "measure_down_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@toc_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "toc_elev_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_a", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_b", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_c", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_a", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_b", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_c", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@northing_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "northing_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@easting_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "easting_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@notes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     MONITOR_LOCATIONS.*\r\nFROM         MONITOR_LOCATIONS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable dataTable = new GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MONITOR_LOCATIONS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string sensor_id, string sensor_name, string serial_num, double sensor_depth_ft, double measure_down_ft, double toc_elev_ft, double cal_fact_psi_a, double cal_fact_psi_b, double cal_fact_psi_c, double cal_fact_head_ft_a, double cal_fact_head_ft_b, double cal_fact_head_ft_c, global::System.Nullable<double> northing_ft, global::System.Nullable<double> easting_ft, string notes) {
            if ((sensor_id == null)) {
                throw new global::System.ArgumentNullException("sensor_id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(sensor_id));
            }
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensor_name));
            }
            if ((serial_num == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(serial_num));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(sensor_depth_ft));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(measure_down_ft));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(toc_elev_ft));
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(cal_fact_psi_a));
            this.Adapter.InsertCommand.Parameters[7].Value = ((double)(cal_fact_psi_b));
            this.Adapter.InsertCommand.Parameters[8].Value = ((double)(cal_fact_psi_c));
            this.Adapter.InsertCommand.Parameters[9].Value = ((double)(cal_fact_head_ft_a));
            this.Adapter.InsertCommand.Parameters[10].Value = ((double)(cal_fact_head_ft_b));
            this.Adapter.InsertCommand.Parameters[11].Value = ((double)(cal_fact_head_ft_c));
            if ((northing_ft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(northing_ft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((easting_ft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(easting_ft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((notes == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(notes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P1401TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P1401TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P1401";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P1401] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P1401.*\r\nFROM         P1401";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P1401DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P1401DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P1401DataTable dataTable = new GroundwaterMonitorDataSet.P1401DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P1401DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P1401");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P1402TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P1402TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P1402";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P1402] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P1402.*\r\nFROM         P1402";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P1402DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P1402DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P1402DataTable dataTable = new GroundwaterMonitorDataSet.P1402DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P1402DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P1402");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P4501TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P4501TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P4501";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P4501] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P4501.*\r\nFROM         P4501";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P4501DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P4501DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P4501DataTable dataTable = new GroundwaterMonitorDataSet.P4501DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P4501DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P4501");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P4502TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P4502TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P4502";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P4502] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P4502.*\r\nFROM         P4502";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P4502DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P4502DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P4502DataTable dataTable = new GroundwaterMonitorDataSet.P4502DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P4502DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P4502");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P4503TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P4503TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P4503";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P4503] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P4503.*\r\nFROM         P4503";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P4503DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P4503DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P4503DataTable dataTable = new GroundwaterMonitorDataSet.P4503DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P4503DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P4503");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P4504TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P4504TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P4504";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P4504] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P4504.*\r\nFROM         P4504";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P4504DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P4504DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P4504DataTable dataTable = new GroundwaterMonitorDataSet.P4504DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P4504DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P4504");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P4505TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P4505TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P4505";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P4505] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P4505.*\r\nFROM         P4505";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P4505DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P4505DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P4505DataTable dataTable = new GroundwaterMonitorDataSet.P4505DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P4505DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P4505");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P5201TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P5201TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P5201";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P5201] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P5201.*\r\nFROM         P5201";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P5201DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P5201DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P5201DataTable dataTable = new GroundwaterMonitorDataSet.P5201DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P5201DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P5201");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P5202TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P5202TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P5202";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P5202] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P5202.*\r\nFROM         P5202";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P5202DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P5202DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P5202DataTable dataTable = new GroundwaterMonitorDataSet.P5202DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P5202DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P5202");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P5203TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P5203TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P5203";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P5203] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P5203.*\r\nFROM         P5203";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P5203DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P5203DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P5203DataTable dataTable = new GroundwaterMonitorDataSet.P5203DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P5203DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P5203");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class P5204TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public P5204TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "P5204";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [P5204] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     P5204.*\r\nFROM         P5204";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.P5204DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.P5204DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.P5204DataTable dataTable = new GroundwaterMonitorDataSet.P5204DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.P5204DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "P5204");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SESSIONTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SESSIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SESSION";
            tableMapping.ColumnMappings.Add("edit_id", "edit_id");
            tableMapping.ColumnMappings.Add("edit_date", "edit_date");
            tableMapping.ColumnMappings.Add("edited_by", "edited_by");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [SESSION] WHERE (([edit_id] = @Original_edit_id) AND ([edit_date] = @" +
                "Original_edit_date) AND ([edited_by] = @Original_edited_by))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [SESSION] ([edit_id], [edit_date], [edited_by]) VALUES (@edit_id, @ed" +
                "it_date, @edited_by);\r\nSELECT edit_id, edit_date, edited_by FROM SESSION WHERE (" +
                "edit_id = @edit_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [SESSION] SET [edit_id] = @edit_id, [edit_date] = @edit_date, [edited_by] = @edited_by WHERE (([edit_id] = @Original_edit_id) AND ([edit_date] = @Original_edit_date) AND ([edited_by] = @Original_edited_by));
SELECT edit_id, edit_date, edited_by FROM SESSION WHERE (edit_id = @edit_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     SESSION.*\r\nFROM         SESSION";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.SESSIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.SESSIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.SESSIONDataTable dataTable = new GroundwaterMonitorDataSet.SESSIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.SESSIONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SESSION");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_edit_id, System.DateTime Original_edit_date, string Original_edited_by) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_edit_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_edited_by));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int edit_id, System.DateTime edit_date, string edited_by) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(edit_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(edited_by));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int edit_id, System.DateTime edit_date, string edited_by, int Original_edit_id, System.DateTime Original_edit_date, string Original_edited_by) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(edit_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(edited_by));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_edit_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_edited_by));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime edit_date, string edited_by, int Original_edit_id, System.DateTime Original_edit_date, string Original_edited_by) {
            return this.Update(Original_edit_id, edit_date, edited_by, Original_edit_id, Original_edit_date, Original_edited_by);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GwMonUpdaterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GwMonUpdaterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GwMonUpdater";
            tableMapping.ColumnMappings.Add("readingId", "readingId");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("headPsi", "headPsi");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `GwMonUpdater` WHERE ((`readingId` = ?) AND ((? = 1 AND `readingDate` IS NULL) OR (`readingDate` = ?)) AND ((? = 1 AND `readingHertz` IS NULL) OR (`readingHertz` = ?)) AND ((? = 1 AND `headPsi` IS NULL) OR (`headPsi` = ?)) AND ((? = 1 AND `tempCelsius` IS NULL) OR (`tempCelsius` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_readingId", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingId", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_readingDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_readingDate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_readingHertz", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingHertz", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_readingHertz", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingHertz", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_headPsi", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "headPsi", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_headPsi", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "headPsi", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_tempCelsius", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tempCelsius", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_tempCelsius", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tempCelsius", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `GwMonUpdater` (`readingId`, `readingDate`, `readingHertz`, `headPsi`" +
                ", `tempCelsius`) VALUES (?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("readingId", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingId", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("readingDate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("readingHertz", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingHertz", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("headPsi", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "headPsi", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("tempCelsius", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tempCelsius", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `GwMonUpdater` SET `readingId` = ?, `readingDate` = ?, `readingHertz` = ?, `headPsi` = ?, `tempCelsius` = ? WHERE ((`readingId` = ?) AND ((? = 1 AND `readingDate` IS NULL) OR (`readingDate` = ?)) AND ((? = 1 AND `readingHertz` IS NULL) OR (`readingHertz` = ?)) AND ((? = 1 AND `headPsi` IS NULL) OR (`headPsi` = ?)) AND ((? = 1 AND `tempCelsius` IS NULL) OR (`tempCelsius` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("readingId", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingId", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("readingDate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("readingHertz", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingHertz", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("headPsi", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "headPsi", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("tempCelsius", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tempCelsius", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_readingId", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingId", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_readingDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_readingDate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_readingHertz", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingHertz", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_readingHertz", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "readingHertz", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_headPsi", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "headPsi", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_headPsi", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "headPsi", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_tempCelsius", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tempCelsius", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_tempCelsius", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tempCelsius", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonUpdateConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     GwMonUpdater.*\r\nFROM         GwMonUpdater";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.GwMonUpdaterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.GwMonUpdaterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.GwMonUpdaterDataTable dataTable = new GroundwaterMonitorDataSet.GwMonUpdaterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.GwMonUpdaterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "GwMonUpdater");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<int> Original_readingId, global::System.Nullable<global::System.DateTime> Original_readingDate, global::System.Nullable<double> Original_readingHertz, global::System.Nullable<double> Original_headPsi, global::System.Nullable<double> Original_tempCelsius) {
            if ((Original_readingId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_readingId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_readingDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_readingDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_readingHertz.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_readingHertz.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_headPsi.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_headPsi.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_tempCelsius.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_tempCelsius.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> readingId, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> headPsi, global::System.Nullable<double> tempCelsius) {
            if ((readingId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(readingId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((headPsi.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(headPsi.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> readingId, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> headPsi, global::System.Nullable<double> tempCelsius, global::System.Nullable<int> Original_readingId, global::System.Nullable<global::System.DateTime> Original_readingDate, global::System.Nullable<double> Original_readingHertz, global::System.Nullable<double> Original_headPsi, global::System.Nullable<double> Original_tempCelsius) {
            if ((readingId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(readingId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((headPsi.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(headPsi.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_readingId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_readingId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_readingDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Original_readingDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_readingHertz.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(Original_readingHertz.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_headPsi.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(Original_headPsi.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_tempCelsius.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(Original_tempCelsius.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> headPsi, global::System.Nullable<double> tempCelsius, global::System.Nullable<int> Original_readingId, global::System.Nullable<global::System.DateTime> Original_readingDate, global::System.Nullable<double> Original_readingHertz, global::System.Nullable<double> Original_headPsi, global::System.Nullable<double> Original_tempCelsius) {
            return this.Update(Original_readingId, readingDate, readingHertz, headPsi, tempCelsius, Original_readingId, Original_readingDate, Original_readingHertz, Original_headPsi, Original_tempCelsius);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TGD1ATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TGD1ATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TGD1A";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TGD1A] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TGD1A.*\r\nFROM         TGD1A";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.TGD1ADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.TGD1ADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.TGD1ADataTable dataTable = new GroundwaterMonitorDataSet.TGD1ADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.TGD1ADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TGD1A");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TGD1BTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TGD1BTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TGD1B";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("f2Scale", "f2Scale");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TGD1B] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [f2Scale], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @f2Scale, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@f2Scale", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2Scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TGD1B.*\r\nFROM         TGD1B";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.TGD1BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.TGD1BDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.TGD1BDataTable dataTable = new GroundwaterMonitorDataSet.TGD1BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.TGD1BDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TGD1B");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> f2Scale, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((f2Scale.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(f2Scale.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TGD2ATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TGD2ATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TGD2A";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TGD2A] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TGD2A.*\r\nFROM         TGD2A";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.TGD2ADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.TGD2ADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.TGD2ADataTable dataTable = new GroundwaterMonitorDataSet.TGD2ADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.TGD2ADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TGD2A");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TGD2BTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TGD2BTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TGD2B";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TGD2B] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TGD2B.*\r\nFROM         TGD2B";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.TGD2BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.TGD2BDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.TGD2BDataTable dataTable = new GroundwaterMonitorDataSet.TGD2BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.TGD2BDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TGD2B");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TGD3ATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TGD3ATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TGD3A";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TGD3A] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TGD3A.*\r\nFROM         TGD3A";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.TGD3ADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.TGD3ADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.TGD3ADataTable dataTable = new GroundwaterMonitorDataSet.TGD3ADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.TGD3ADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TGD3A");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TGD3BTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TGD3BTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TGD3B";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("sensorID", "sensorID");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            tableMapping.ColumnMappings.Add("f2Scale", "f2Scale");
            tableMapping.ColumnMappings.Add("headPSI", "headPSI");
            tableMapping.ColumnMappings.Add("headFeet", "headFeet");
            tableMapping.ColumnMappings.Add("gwDepth", "gwDepth");
            tableMapping.ColumnMappings.Add("gwElevation", "gwElevation");
            tableMapping.ColumnMappings.Add("gwMin", "gwMin");
            tableMapping.ColumnMappings.Add("gwMax", "gwMax");
            tableMapping.ColumnMappings.Add("groundElevation", "groundElevation");
            tableMapping.ColumnMappings.Add("dataQualFlag", "dataQualFlag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TGD3B] ([id], [sensorID], [readingDate], [readingHertz], [tempCelsius], [f2Scale], [headPSI], [headFeet], [gwDepth], [gwElevation], [gwMin], [gwMax], [groundElevation], [dataQualFlag]) VALUES (@id, @sensorID, @readingDate, @readingHertz, @tempCelsius, @f2Scale, @headPSI, @headFeet, @gwDepth, @gwElevation, @gwMin, @gwMax, @groundElevation, @dataQualFlag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@readingHertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "readingHertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempCelsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempCelsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@f2Scale", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2Scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headPSI", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headPSI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headFeet", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headFeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwDepth", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwDepth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwMax", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwMax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groundElevation", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "groundElevation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dataQualFlag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dataQualFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TGD3B.*\r\nFROM         TGD3B";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.TGD3BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.TGD3BDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.TGD3BDataTable dataTable = new GroundwaterMonitorDataSet.TGD3BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.TGD3BDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TGD3B");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> id, string sensorID, global::System.Nullable<global::System.DateTime> readingDate, global::System.Nullable<double> readingHertz, global::System.Nullable<double> tempCelsius, global::System.Nullable<double> f2Scale, global::System.Nullable<double> headPSI, global::System.Nullable<double> headFeet, global::System.Nullable<double> gwDepth, global::System.Nullable<double> gwElevation, global::System.Nullable<double> gwMin, global::System.Nullable<double> gwMax, global::System.Nullable<double> groundElevation, string dataQualFlag) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sensorID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensorID));
            }
            if ((readingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(readingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((readingHertz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(readingHertz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tempCelsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(tempCelsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((f2Scale.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(f2Scale.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((headPSI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(headPSI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((headFeet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(headFeet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((gwDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(gwDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((gwElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(gwElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gwMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gwMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((gwMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(gwMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((groundElevation.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(groundElevation.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((dataQualFlag == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(dataQualFlag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private GW_MONITORINGTableAdapter _gW_MONITORINGTableAdapter;
        
        private MONITOR_LOCATIONSTableAdapter _mONITOR_LOCATIONSTableAdapter;
        
        private P1401TableAdapter _p1401TableAdapter;
        
        private P1402TableAdapter _p1402TableAdapter;
        
        private P4501TableAdapter _p4501TableAdapter;
        
        private P4502TableAdapter _p4502TableAdapter;
        
        private P4503TableAdapter _p4503TableAdapter;
        
        private P4504TableAdapter _p4504TableAdapter;
        
        private P4505TableAdapter _p4505TableAdapter;
        
        private P5201TableAdapter _p5201TableAdapter;
        
        private P5202TableAdapter _p5202TableAdapter;
        
        private P5203TableAdapter _p5203TableAdapter;
        
        private P5204TableAdapter _p5204TableAdapter;
        
        private SESSIONTableAdapter _sESSIONTableAdapter;
        
        private GwMonUpdaterTableAdapter _gwMonUpdaterTableAdapter;
        
        private TGD1ATableAdapter _tGD1ATableAdapter;
        
        private TGD1BTableAdapter _tGD1BTableAdapter;
        
        private TGD2ATableAdapter _tGD2ATableAdapter;
        
        private TGD2BTableAdapter _tGD2BTableAdapter;
        
        private TGD3ATableAdapter _tGD3ATableAdapter;
        
        private TGD3BTableAdapter _tGD3BTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public GW_MONITORINGTableAdapter GW_MONITORINGTableAdapter {
            get {
                return this._gW_MONITORINGTableAdapter;
            }
            set {
                this._gW_MONITORINGTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MONITOR_LOCATIONSTableAdapter MONITOR_LOCATIONSTableAdapter {
            get {
                return this._mONITOR_LOCATIONSTableAdapter;
            }
            set {
                this._mONITOR_LOCATIONSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P1401TableAdapter P1401TableAdapter {
            get {
                return this._p1401TableAdapter;
            }
            set {
                this._p1401TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P1402TableAdapter P1402TableAdapter {
            get {
                return this._p1402TableAdapter;
            }
            set {
                this._p1402TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P4501TableAdapter P4501TableAdapter {
            get {
                return this._p4501TableAdapter;
            }
            set {
                this._p4501TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P4502TableAdapter P4502TableAdapter {
            get {
                return this._p4502TableAdapter;
            }
            set {
                this._p4502TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P4503TableAdapter P4503TableAdapter {
            get {
                return this._p4503TableAdapter;
            }
            set {
                this._p4503TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P4504TableAdapter P4504TableAdapter {
            get {
                return this._p4504TableAdapter;
            }
            set {
                this._p4504TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P4505TableAdapter P4505TableAdapter {
            get {
                return this._p4505TableAdapter;
            }
            set {
                this._p4505TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P5201TableAdapter P5201TableAdapter {
            get {
                return this._p5201TableAdapter;
            }
            set {
                this._p5201TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P5202TableAdapter P5202TableAdapter {
            get {
                return this._p5202TableAdapter;
            }
            set {
                this._p5202TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P5203TableAdapter P5203TableAdapter {
            get {
                return this._p5203TableAdapter;
            }
            set {
                this._p5203TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public P5204TableAdapter P5204TableAdapter {
            get {
                return this._p5204TableAdapter;
            }
            set {
                this._p5204TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SESSIONTableAdapter SESSIONTableAdapter {
            get {
                return this._sESSIONTableAdapter;
            }
            set {
                this._sESSIONTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public GwMonUpdaterTableAdapter GwMonUpdaterTableAdapter {
            get {
                return this._gwMonUpdaterTableAdapter;
            }
            set {
                this._gwMonUpdaterTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TGD1ATableAdapter TGD1ATableAdapter {
            get {
                return this._tGD1ATableAdapter;
            }
            set {
                this._tGD1ATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TGD1BTableAdapter TGD1BTableAdapter {
            get {
                return this._tGD1BTableAdapter;
            }
            set {
                this._tGD1BTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TGD2ATableAdapter TGD2ATableAdapter {
            get {
                return this._tGD2ATableAdapter;
            }
            set {
                this._tGD2ATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TGD2BTableAdapter TGD2BTableAdapter {
            get {
                return this._tGD2BTableAdapter;
            }
            set {
                this._tGD2BTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TGD3ATableAdapter TGD3ATableAdapter {
            get {
                return this._tGD3ATableAdapter;
            }
            set {
                this._tGD3ATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TGD3BTableAdapter TGD3BTableAdapter {
            get {
                return this._tGD3BTableAdapter;
            }
            set {
                this._tGD3BTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._gW_MONITORINGTableAdapter != null) 
                            && (this._gW_MONITORINGTableAdapter.Connection != null))) {
                    return this._gW_MONITORINGTableAdapter.Connection;
                }
                if (((this._mONITOR_LOCATIONSTableAdapter != null) 
                            && (this._mONITOR_LOCATIONSTableAdapter.Connection != null))) {
                    return this._mONITOR_LOCATIONSTableAdapter.Connection;
                }
                if (((this._p1401TableAdapter != null) 
                            && (this._p1401TableAdapter.Connection != null))) {
                    return this._p1401TableAdapter.Connection;
                }
                if (((this._p1402TableAdapter != null) 
                            && (this._p1402TableAdapter.Connection != null))) {
                    return this._p1402TableAdapter.Connection;
                }
                if (((this._p4501TableAdapter != null) 
                            && (this._p4501TableAdapter.Connection != null))) {
                    return this._p4501TableAdapter.Connection;
                }
                if (((this._p4502TableAdapter != null) 
                            && (this._p4502TableAdapter.Connection != null))) {
                    return this._p4502TableAdapter.Connection;
                }
                if (((this._p4503TableAdapter != null) 
                            && (this._p4503TableAdapter.Connection != null))) {
                    return this._p4503TableAdapter.Connection;
                }
                if (((this._p4504TableAdapter != null) 
                            && (this._p4504TableAdapter.Connection != null))) {
                    return this._p4504TableAdapter.Connection;
                }
                if (((this._p4505TableAdapter != null) 
                            && (this._p4505TableAdapter.Connection != null))) {
                    return this._p4505TableAdapter.Connection;
                }
                if (((this._p5201TableAdapter != null) 
                            && (this._p5201TableAdapter.Connection != null))) {
                    return this._p5201TableAdapter.Connection;
                }
                if (((this._p5202TableAdapter != null) 
                            && (this._p5202TableAdapter.Connection != null))) {
                    return this._p5202TableAdapter.Connection;
                }
                if (((this._p5203TableAdapter != null) 
                            && (this._p5203TableAdapter.Connection != null))) {
                    return this._p5203TableAdapter.Connection;
                }
                if (((this._p5204TableAdapter != null) 
                            && (this._p5204TableAdapter.Connection != null))) {
                    return this._p5204TableAdapter.Connection;
                }
                if (((this._sESSIONTableAdapter != null) 
                            && (this._sESSIONTableAdapter.Connection != null))) {
                    return this._sESSIONTableAdapter.Connection;
                }
                if (((this._gwMonUpdaterTableAdapter != null) 
                            && (this._gwMonUpdaterTableAdapter.Connection != null))) {
                    return this._gwMonUpdaterTableAdapter.Connection;
                }
                if (((this._tGD1ATableAdapter != null) 
                            && (this._tGD1ATableAdapter.Connection != null))) {
                    return this._tGD1ATableAdapter.Connection;
                }
                if (((this._tGD1BTableAdapter != null) 
                            && (this._tGD1BTableAdapter.Connection != null))) {
                    return this._tGD1BTableAdapter.Connection;
                }
                if (((this._tGD2ATableAdapter != null) 
                            && (this._tGD2ATableAdapter.Connection != null))) {
                    return this._tGD2ATableAdapter.Connection;
                }
                if (((this._tGD2BTableAdapter != null) 
                            && (this._tGD2BTableAdapter.Connection != null))) {
                    return this._tGD2BTableAdapter.Connection;
                }
                if (((this._tGD3ATableAdapter != null) 
                            && (this._tGD3ATableAdapter.Connection != null))) {
                    return this._tGD3ATableAdapter.Connection;
                }
                if (((this._tGD3BTableAdapter != null) 
                            && (this._tGD3BTableAdapter.Connection != null))) {
                    return this._tGD3BTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._gW_MONITORINGTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p1401TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p1402TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p4501TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p4502TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p4503TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p4504TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p4505TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p5201TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p5202TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p5203TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._p5204TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sESSIONTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._gwMonUpdaterTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tGD1ATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tGD1BTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tGD2ATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tGD2BTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tGD3ATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tGD3BTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(GroundwaterMonitorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._gwMonUpdaterTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GwMonUpdater.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._gwMonUpdaterTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tGD1ATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TGD1A.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tGD1ATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p5203TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P5203.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p5203TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p5204TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P5204.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p5204TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tGD1BTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TGD1B.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tGD1BTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tGD3BTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TGD3B.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tGD3BTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tGD3ATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TGD3A.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tGD3ATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tGD2ATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TGD2A.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tGD2ATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tGD2BTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TGD2B.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tGD2BTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p1402TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P1402.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p1402TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p4501TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P4501.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p4501TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p1401TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P1401.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p1401TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._gW_MONITORINGTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GW_MONITORING.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._gW_MONITORINGTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MONITOR_LOCATIONS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mONITOR_LOCATIONSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p4502TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P4502.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p4502TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p5201TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P5201.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p5201TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p5202TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P5202.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p5202TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p4505TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P4505.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p4505TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p4503TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P4503.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p4503TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._p4504TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.P4504.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._p4504TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(GroundwaterMonitorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._gwMonUpdaterTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GwMonUpdater.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._gwMonUpdaterTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tGD1ATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TGD1A.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tGD1ATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p5203TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P5203.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p5203TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p5204TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P5204.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p5204TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tGD1BTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TGD1B.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tGD1BTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tGD3BTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TGD3B.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tGD3BTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tGD3ATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TGD3A.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tGD3ATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tGD2ATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TGD2A.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tGD2ATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tGD2BTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TGD2B.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tGD2BTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p1402TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P1402.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p1402TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p4501TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P4501.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p4501TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p1401TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P1401.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p1401TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._gW_MONITORINGTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GW_MONITORING.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._gW_MONITORINGTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MONITOR_LOCATIONS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mONITOR_LOCATIONSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p4502TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P4502.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p4502TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p5201TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P5201.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p5201TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p5202TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P5202.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p5202TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p4505TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P4505.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p4505TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p4503TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P4503.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p4503TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._p4504TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.P4504.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._p4504TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(GroundwaterMonitorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._p4504TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P4504.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p4504TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p4503TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P4503.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p4503TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p4505TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P4505.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p4505TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p5202TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P5202.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p5202TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p5201TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P5201.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p5201TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p4502TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P4502.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p4502TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MONITOR_LOCATIONS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mONITOR_LOCATIONSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._gW_MONITORINGTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GW_MONITORING.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._gW_MONITORINGTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p1401TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P1401.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p1401TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p4501TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P4501.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p4501TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p1402TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P1402.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p1402TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tGD2BTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TGD2B.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tGD2BTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tGD2ATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TGD2A.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tGD2ATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tGD3ATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TGD3A.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tGD3ATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tGD3BTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TGD3B.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tGD3BTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tGD1BTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TGD1B.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tGD1BTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p5204TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P5204.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p5204TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._p5203TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.P5203.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._p5203TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tGD1ATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TGD1A.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tGD1ATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._gwMonUpdaterTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GwMonUpdater.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._gwMonUpdaterTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(GroundwaterMonitorDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._gW_MONITORINGTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._gW_MONITORINGTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mONITOR_LOCATIONSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mONITOR_LOCATIONSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p1401TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p1401TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p1402TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p1402TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p4501TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p4501TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p4502TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p4502TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p4503TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p4503TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p4504TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p4504TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p4505TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p4505TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p5201TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p5201TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p5202TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p5202TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p5203TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p5203TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._p5204TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._p5204TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sESSIONTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sESSIONTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._gwMonUpdaterTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._gwMonUpdaterTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tGD1ATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tGD1ATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tGD1BTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tGD1BTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tGD2ATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tGD2ATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tGD2BTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tGD2BTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tGD3ATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tGD3ATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tGD3BTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tGD3BTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._gW_MONITORINGTableAdapter != null)) {
                    revertConnections.Add(this._gW_MONITORINGTableAdapter, this._gW_MONITORINGTableAdapter.Connection);
                    this._gW_MONITORINGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._gW_MONITORINGTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._gW_MONITORINGTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._gW_MONITORINGTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._gW_MONITORINGTableAdapter.Adapter);
                    }
                }
                if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                    revertConnections.Add(this._mONITOR_LOCATIONSTableAdapter, this._mONITOR_LOCATIONSTableAdapter.Connection);
                    this._mONITOR_LOCATIONSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mONITOR_LOCATIONSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mONITOR_LOCATIONSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mONITOR_LOCATIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mONITOR_LOCATIONSTableAdapter.Adapter);
                    }
                }
                if ((this._p1401TableAdapter != null)) {
                    revertConnections.Add(this._p1401TableAdapter, this._p1401TableAdapter.Connection);
                    this._p1401TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p1401TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p1401TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p1401TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p1401TableAdapter.Adapter);
                    }
                }
                if ((this._p1402TableAdapter != null)) {
                    revertConnections.Add(this._p1402TableAdapter, this._p1402TableAdapter.Connection);
                    this._p1402TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p1402TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p1402TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p1402TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p1402TableAdapter.Adapter);
                    }
                }
                if ((this._p4501TableAdapter != null)) {
                    revertConnections.Add(this._p4501TableAdapter, this._p4501TableAdapter.Connection);
                    this._p4501TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p4501TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p4501TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p4501TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p4501TableAdapter.Adapter);
                    }
                }
                if ((this._p4502TableAdapter != null)) {
                    revertConnections.Add(this._p4502TableAdapter, this._p4502TableAdapter.Connection);
                    this._p4502TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p4502TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p4502TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p4502TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p4502TableAdapter.Adapter);
                    }
                }
                if ((this._p4503TableAdapter != null)) {
                    revertConnections.Add(this._p4503TableAdapter, this._p4503TableAdapter.Connection);
                    this._p4503TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p4503TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p4503TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p4503TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p4503TableAdapter.Adapter);
                    }
                }
                if ((this._p4504TableAdapter != null)) {
                    revertConnections.Add(this._p4504TableAdapter, this._p4504TableAdapter.Connection);
                    this._p4504TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p4504TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p4504TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p4504TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p4504TableAdapter.Adapter);
                    }
                }
                if ((this._p4505TableAdapter != null)) {
                    revertConnections.Add(this._p4505TableAdapter, this._p4505TableAdapter.Connection);
                    this._p4505TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p4505TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p4505TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p4505TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p4505TableAdapter.Adapter);
                    }
                }
                if ((this._p5201TableAdapter != null)) {
                    revertConnections.Add(this._p5201TableAdapter, this._p5201TableAdapter.Connection);
                    this._p5201TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p5201TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p5201TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p5201TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p5201TableAdapter.Adapter);
                    }
                }
                if ((this._p5202TableAdapter != null)) {
                    revertConnections.Add(this._p5202TableAdapter, this._p5202TableAdapter.Connection);
                    this._p5202TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p5202TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p5202TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p5202TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p5202TableAdapter.Adapter);
                    }
                }
                if ((this._p5203TableAdapter != null)) {
                    revertConnections.Add(this._p5203TableAdapter, this._p5203TableAdapter.Connection);
                    this._p5203TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p5203TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p5203TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p5203TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p5203TableAdapter.Adapter);
                    }
                }
                if ((this._p5204TableAdapter != null)) {
                    revertConnections.Add(this._p5204TableAdapter, this._p5204TableAdapter.Connection);
                    this._p5204TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._p5204TableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._p5204TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._p5204TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._p5204TableAdapter.Adapter);
                    }
                }
                if ((this._sESSIONTableAdapter != null)) {
                    revertConnections.Add(this._sESSIONTableAdapter, this._sESSIONTableAdapter.Connection);
                    this._sESSIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sESSIONTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sESSIONTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sESSIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sESSIONTableAdapter.Adapter);
                    }
                }
                if ((this._gwMonUpdaterTableAdapter != null)) {
                    revertConnections.Add(this._gwMonUpdaterTableAdapter, this._gwMonUpdaterTableAdapter.Connection);
                    this._gwMonUpdaterTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._gwMonUpdaterTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._gwMonUpdaterTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._gwMonUpdaterTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._gwMonUpdaterTableAdapter.Adapter);
                    }
                }
                if ((this._tGD1ATableAdapter != null)) {
                    revertConnections.Add(this._tGD1ATableAdapter, this._tGD1ATableAdapter.Connection);
                    this._tGD1ATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tGD1ATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tGD1ATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tGD1ATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tGD1ATableAdapter.Adapter);
                    }
                }
                if ((this._tGD1BTableAdapter != null)) {
                    revertConnections.Add(this._tGD1BTableAdapter, this._tGD1BTableAdapter.Connection);
                    this._tGD1BTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tGD1BTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tGD1BTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tGD1BTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tGD1BTableAdapter.Adapter);
                    }
                }
                if ((this._tGD2ATableAdapter != null)) {
                    revertConnections.Add(this._tGD2ATableAdapter, this._tGD2ATableAdapter.Connection);
                    this._tGD2ATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tGD2ATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tGD2ATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tGD2ATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tGD2ATableAdapter.Adapter);
                    }
                }
                if ((this._tGD2BTableAdapter != null)) {
                    revertConnections.Add(this._tGD2BTableAdapter, this._tGD2BTableAdapter.Connection);
                    this._tGD2BTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tGD2BTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tGD2BTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tGD2BTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tGD2BTableAdapter.Adapter);
                    }
                }
                if ((this._tGD3ATableAdapter != null)) {
                    revertConnections.Add(this._tGD3ATableAdapter, this._tGD3ATableAdapter.Connection);
                    this._tGD3ATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tGD3ATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tGD3ATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tGD3ATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tGD3ATableAdapter.Adapter);
                    }
                }
                if ((this._tGD3BTableAdapter != null)) {
                    revertConnections.Add(this._tGD3BTableAdapter, this._tGD3BTableAdapter.Connection);
                    this._tGD3BTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tGD3BTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tGD3BTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tGD3BTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tGD3BTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._gW_MONITORINGTableAdapter != null)) {
                    this._gW_MONITORINGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._gW_MONITORINGTableAdapter]));
                    this._gW_MONITORINGTableAdapter.Transaction = null;
                }
                if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                    this._mONITOR_LOCATIONSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mONITOR_LOCATIONSTableAdapter]));
                    this._mONITOR_LOCATIONSTableAdapter.Transaction = null;
                }
                if ((this._p1401TableAdapter != null)) {
                    this._p1401TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p1401TableAdapter]));
                    this._p1401TableAdapter.Transaction = null;
                }
                if ((this._p1402TableAdapter != null)) {
                    this._p1402TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p1402TableAdapter]));
                    this._p1402TableAdapter.Transaction = null;
                }
                if ((this._p4501TableAdapter != null)) {
                    this._p4501TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p4501TableAdapter]));
                    this._p4501TableAdapter.Transaction = null;
                }
                if ((this._p4502TableAdapter != null)) {
                    this._p4502TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p4502TableAdapter]));
                    this._p4502TableAdapter.Transaction = null;
                }
                if ((this._p4503TableAdapter != null)) {
                    this._p4503TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p4503TableAdapter]));
                    this._p4503TableAdapter.Transaction = null;
                }
                if ((this._p4504TableAdapter != null)) {
                    this._p4504TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p4504TableAdapter]));
                    this._p4504TableAdapter.Transaction = null;
                }
                if ((this._p4505TableAdapter != null)) {
                    this._p4505TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p4505TableAdapter]));
                    this._p4505TableAdapter.Transaction = null;
                }
                if ((this._p5201TableAdapter != null)) {
                    this._p5201TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p5201TableAdapter]));
                    this._p5201TableAdapter.Transaction = null;
                }
                if ((this._p5202TableAdapter != null)) {
                    this._p5202TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p5202TableAdapter]));
                    this._p5202TableAdapter.Transaction = null;
                }
                if ((this._p5203TableAdapter != null)) {
                    this._p5203TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p5203TableAdapter]));
                    this._p5203TableAdapter.Transaction = null;
                }
                if ((this._p5204TableAdapter != null)) {
                    this._p5204TableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._p5204TableAdapter]));
                    this._p5204TableAdapter.Transaction = null;
                }
                if ((this._sESSIONTableAdapter != null)) {
                    this._sESSIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sESSIONTableAdapter]));
                    this._sESSIONTableAdapter.Transaction = null;
                }
                if ((this._gwMonUpdaterTableAdapter != null)) {
                    this._gwMonUpdaterTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._gwMonUpdaterTableAdapter]));
                    this._gwMonUpdaterTableAdapter.Transaction = null;
                }
                if ((this._tGD1ATableAdapter != null)) {
                    this._tGD1ATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tGD1ATableAdapter]));
                    this._tGD1ATableAdapter.Transaction = null;
                }
                if ((this._tGD1BTableAdapter != null)) {
                    this._tGD1BTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tGD1BTableAdapter]));
                    this._tGD1BTableAdapter.Transaction = null;
                }
                if ((this._tGD2ATableAdapter != null)) {
                    this._tGD2ATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tGD2ATableAdapter]));
                    this._tGD2ATableAdapter.Transaction = null;
                }
                if ((this._tGD2BTableAdapter != null)) {
                    this._tGD2BTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tGD2BTableAdapter]));
                    this._tGD2BTableAdapter.Transaction = null;
                }
                if ((this._tGD3ATableAdapter != null)) {
                    this._tGD3ATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tGD3ATableAdapter]));
                    this._tGD3ATableAdapter.Transaction = null;
                }
                if ((this._tGD3BTableAdapter != null)) {
                    this._tGD3BTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tGD3BTableAdapter]));
                    this._tGD3BTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591