//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3623
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GMonGr {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GroundwaterMonitorDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GroundwaterMonitorDataSet : global::System.Data.DataSet {
        
        private MONITOR_LOCATIONSDataTable tableMONITOR_LOCATIONS;
        
        private GwMonUpdaterDataTable tableGwMonUpdater;
        
        private SessionListDataTable tableSessionList;
        
        private MonitorListDataTable tableMonitorList;
        
        private GW_MONITOR_READINGDataTable tableGW_MONITOR_READING;
        
        private SESSIONDataTable tableSESSION;
        
        private GwMonQcDataTable tableGwMonQc;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GroundwaterMonitorDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GroundwaterMonitorDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MONITOR_LOCATIONS"] != null)) {
                    base.Tables.Add(new MONITOR_LOCATIONSDataTable(ds.Tables["MONITOR_LOCATIONS"]));
                }
                if ((ds.Tables["GwMonUpdater"] != null)) {
                    base.Tables.Add(new GwMonUpdaterDataTable(ds.Tables["GwMonUpdater"]));
                }
                if ((ds.Tables["SessionList"] != null)) {
                    base.Tables.Add(new SessionListDataTable(ds.Tables["SessionList"]));
                }
                if ((ds.Tables["MonitorList"] != null)) {
                    base.Tables.Add(new MonitorListDataTable(ds.Tables["MonitorList"]));
                }
                if ((ds.Tables["GW_MONITOR_READING"] != null)) {
                    base.Tables.Add(new GW_MONITOR_READINGDataTable(ds.Tables["GW_MONITOR_READING"]));
                }
                if ((ds.Tables["SESSION"] != null)) {
                    base.Tables.Add(new SESSIONDataTable(ds.Tables["SESSION"]));
                }
                if ((ds.Tables["GwMonQc"] != null)) {
                    base.Tables.Add(new GwMonQcDataTable(ds.Tables["GwMonQc"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MONITOR_LOCATIONSDataTable MONITOR_LOCATIONS {
            get {
                return this.tableMONITOR_LOCATIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GwMonUpdaterDataTable GwMonUpdater {
            get {
                return this.tableGwMonUpdater;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionListDataTable SessionList {
            get {
                return this.tableSessionList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MonitorListDataTable MonitorList {
            get {
                return this.tableMonitorList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GW_MONITOR_READINGDataTable GW_MONITOR_READING {
            get {
                return this.tableGW_MONITOR_READING;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SESSIONDataTable SESSION {
            get {
                return this.tableSESSION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GwMonQcDataTable GwMonQc {
            get {
                return this.tableGwMonQc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GroundwaterMonitorDataSet cln = ((GroundwaterMonitorDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MONITOR_LOCATIONS"] != null)) {
                    base.Tables.Add(new MONITOR_LOCATIONSDataTable(ds.Tables["MONITOR_LOCATIONS"]));
                }
                if ((ds.Tables["GwMonUpdater"] != null)) {
                    base.Tables.Add(new GwMonUpdaterDataTable(ds.Tables["GwMonUpdater"]));
                }
                if ((ds.Tables["SessionList"] != null)) {
                    base.Tables.Add(new SessionListDataTable(ds.Tables["SessionList"]));
                }
                if ((ds.Tables["MonitorList"] != null)) {
                    base.Tables.Add(new MonitorListDataTable(ds.Tables["MonitorList"]));
                }
                if ((ds.Tables["GW_MONITOR_READING"] != null)) {
                    base.Tables.Add(new GW_MONITOR_READINGDataTable(ds.Tables["GW_MONITOR_READING"]));
                }
                if ((ds.Tables["SESSION"] != null)) {
                    base.Tables.Add(new SESSIONDataTable(ds.Tables["SESSION"]));
                }
                if ((ds.Tables["GwMonQc"] != null)) {
                    base.Tables.Add(new GwMonQcDataTable(ds.Tables["GwMonQc"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMONITOR_LOCATIONS = ((MONITOR_LOCATIONSDataTable)(base.Tables["MONITOR_LOCATIONS"]));
            if ((initTable == true)) {
                if ((this.tableMONITOR_LOCATIONS != null)) {
                    this.tableMONITOR_LOCATIONS.InitVars();
                }
            }
            this.tableGwMonUpdater = ((GwMonUpdaterDataTable)(base.Tables["GwMonUpdater"]));
            if ((initTable == true)) {
                if ((this.tableGwMonUpdater != null)) {
                    this.tableGwMonUpdater.InitVars();
                }
            }
            this.tableSessionList = ((SessionListDataTable)(base.Tables["SessionList"]));
            if ((initTable == true)) {
                if ((this.tableSessionList != null)) {
                    this.tableSessionList.InitVars();
                }
            }
            this.tableMonitorList = ((MonitorListDataTable)(base.Tables["MonitorList"]));
            if ((initTable == true)) {
                if ((this.tableMonitorList != null)) {
                    this.tableMonitorList.InitVars();
                }
            }
            this.tableGW_MONITOR_READING = ((GW_MONITOR_READINGDataTable)(base.Tables["GW_MONITOR_READING"]));
            if ((initTable == true)) {
                if ((this.tableGW_MONITOR_READING != null)) {
                    this.tableGW_MONITOR_READING.InitVars();
                }
            }
            this.tableSESSION = ((SESSIONDataTable)(base.Tables["SESSION"]));
            if ((initTable == true)) {
                if ((this.tableSESSION != null)) {
                    this.tableSESSION.InitVars();
                }
            }
            this.tableGwMonQc = ((GwMonQcDataTable)(base.Tables["GwMonQc"]));
            if ((initTable == true)) {
                if ((this.tableGwMonQc != null)) {
                    this.tableGwMonQc.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GroundwaterMonitorDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GroundwaterMonitorDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMONITOR_LOCATIONS = new MONITOR_LOCATIONSDataTable();
            base.Tables.Add(this.tableMONITOR_LOCATIONS);
            this.tableGwMonUpdater = new GwMonUpdaterDataTable();
            base.Tables.Add(this.tableGwMonUpdater);
            this.tableSessionList = new SessionListDataTable();
            base.Tables.Add(this.tableSessionList);
            this.tableMonitorList = new MonitorListDataTable();
            base.Tables.Add(this.tableMonitorList);
            this.tableGW_MONITOR_READING = new GW_MONITOR_READINGDataTable();
            base.Tables.Add(this.tableGW_MONITOR_READING);
            this.tableSESSION = new SESSIONDataTable();
            base.Tables.Add(this.tableSESSION);
            this.tableGwMonQc = new GwMonQcDataTable();
            base.Tables.Add(this.tableGwMonQc);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMONITOR_LOCATIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGwMonUpdater() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSessionList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMonitorList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGW_MONITOR_READING() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSESSION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGwMonQc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MONITOR_LOCATIONSRowChangeEventHandler(object sender, MONITOR_LOCATIONSRowChangeEvent e);
        
        public delegate void GwMonUpdaterRowChangeEventHandler(object sender, GwMonUpdaterRowChangeEvent e);
        
        public delegate void SessionListRowChangeEventHandler(object sender, SessionListRowChangeEvent e);
        
        public delegate void MonitorListRowChangeEventHandler(object sender, MonitorListRowChangeEvent e);
        
        public delegate void GW_MONITOR_READINGRowChangeEventHandler(object sender, GW_MONITOR_READINGRowChangeEvent e);
        
        public delegate void SESSIONRowChangeEventHandler(object sender, SESSIONRowChangeEvent e);
        
        public delegate void GwMonQcRowChangeEventHandler(object sender, GwMonQcRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MONITOR_LOCATIONSDataTable : global::System.Data.TypedTableBase<MONITOR_LOCATIONSRow> {
            
            private global::System.Data.DataColumn columnsensor_id;
            
            private global::System.Data.DataColumn columnsensor_name;
            
            private global::System.Data.DataColumn columnserial_num;
            
            private global::System.Data.DataColumn columnsensor_depth_ft;
            
            private global::System.Data.DataColumn columnmeasure_down_ft;
            
            private global::System.Data.DataColumn columntoc_elev_ft;
            
            private global::System.Data.DataColumn columncal_fact_psi_a;
            
            private global::System.Data.DataColumn columncal_fact_psi_b;
            
            private global::System.Data.DataColumn columncal_fact_psi_c;
            
            private global::System.Data.DataColumn columncal_fact_head_ft_a;
            
            private global::System.Data.DataColumn columncal_fact_head_ft_b;
            
            private global::System.Data.DataColumn columncal_fact_head_ft_c;
            
            private global::System.Data.DataColumn columnnorthing_ft;
            
            private global::System.Data.DataColumn columneasting_ft;
            
            private global::System.Data.DataColumn columnnotes;
            
            private global::System.Data.DataColumn columnf2_scale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSDataTable() {
                this.TableName = "MONITOR_LOCATIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MONITOR_LOCATIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MONITOR_LOCATIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_idColumn {
                get {
                    return this.columnsensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_nameColumn {
                get {
                    return this.columnsensor_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn serial_numColumn {
                get {
                    return this.columnserial_num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_depth_ftColumn {
                get {
                    return this.columnsensor_depth_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn measure_down_ftColumn {
                get {
                    return this.columnmeasure_down_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn toc_elev_ftColumn {
                get {
                    return this.columntoc_elev_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_psi_aColumn {
                get {
                    return this.columncal_fact_psi_a;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_psi_bColumn {
                get {
                    return this.columncal_fact_psi_b;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_psi_cColumn {
                get {
                    return this.columncal_fact_psi_c;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_head_ft_aColumn {
                get {
                    return this.columncal_fact_head_ft_a;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_head_ft_bColumn {
                get {
                    return this.columncal_fact_head_ft_b;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cal_fact_head_ft_cColumn {
                get {
                    return this.columncal_fact_head_ft_c;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn northing_ftColumn {
                get {
                    return this.columnnorthing_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn easting_ftColumn {
                get {
                    return this.columneasting_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notesColumn {
                get {
                    return this.columnnotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn f2_scaleColumn {
                get {
                    return this.columnf2_scale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow this[int index] {
                get {
                    return ((MONITOR_LOCATIONSRow)(this.Rows[index]));
                }
            }
            
            public event MONITOR_LOCATIONSRowChangeEventHandler MONITOR_LOCATIONSRowChanging;
            
            public event MONITOR_LOCATIONSRowChangeEventHandler MONITOR_LOCATIONSRowChanged;
            
            public event MONITOR_LOCATIONSRowChangeEventHandler MONITOR_LOCATIONSRowDeleting;
            
            public event MONITOR_LOCATIONSRowChangeEventHandler MONITOR_LOCATIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMONITOR_LOCATIONSRow(MONITOR_LOCATIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow AddMONITOR_LOCATIONSRow(
                        string sensor_id, 
                        string sensor_name, 
                        string serial_num, 
                        double sensor_depth_ft, 
                        double measure_down_ft, 
                        double toc_elev_ft, 
                        double cal_fact_psi_a, 
                        double cal_fact_psi_b, 
                        double cal_fact_psi_c, 
                        double cal_fact_head_ft_a, 
                        double cal_fact_head_ft_b, 
                        double cal_fact_head_ft_c, 
                        double northing_ft, 
                        double easting_ft, 
                        string notes, 
                        string f2_scale) {
                MONITOR_LOCATIONSRow rowMONITOR_LOCATIONSRow = ((MONITOR_LOCATIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sensor_id,
                        sensor_name,
                        serial_num,
                        sensor_depth_ft,
                        measure_down_ft,
                        toc_elev_ft,
                        cal_fact_psi_a,
                        cal_fact_psi_b,
                        cal_fact_psi_c,
                        cal_fact_head_ft_a,
                        cal_fact_head_ft_b,
                        cal_fact_head_ft_c,
                        northing_ft,
                        easting_ft,
                        notes,
                        f2_scale};
                rowMONITOR_LOCATIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMONITOR_LOCATIONSRow);
                return rowMONITOR_LOCATIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow FindBysensor_name(string sensor_name) {
                return ((MONITOR_LOCATIONSRow)(this.Rows.Find(new object[] {
                            sensor_name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MONITOR_LOCATIONSDataTable cln = ((MONITOR_LOCATIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MONITOR_LOCATIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsensor_id = base.Columns["sensor_id"];
                this.columnsensor_name = base.Columns["sensor_name"];
                this.columnserial_num = base.Columns["serial_num"];
                this.columnsensor_depth_ft = base.Columns["sensor_depth_ft"];
                this.columnmeasure_down_ft = base.Columns["measure_down_ft"];
                this.columntoc_elev_ft = base.Columns["toc_elev_ft"];
                this.columncal_fact_psi_a = base.Columns["cal_fact_psi_a"];
                this.columncal_fact_psi_b = base.Columns["cal_fact_psi_b"];
                this.columncal_fact_psi_c = base.Columns["cal_fact_psi_c"];
                this.columncal_fact_head_ft_a = base.Columns["cal_fact_head_ft_a"];
                this.columncal_fact_head_ft_b = base.Columns["cal_fact_head_ft_b"];
                this.columncal_fact_head_ft_c = base.Columns["cal_fact_head_ft_c"];
                this.columnnorthing_ft = base.Columns["northing_ft"];
                this.columneasting_ft = base.Columns["easting_ft"];
                this.columnnotes = base.Columns["notes"];
                this.columnf2_scale = base.Columns["f2_scale"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsensor_id = new global::System.Data.DataColumn("sensor_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_id);
                this.columnsensor_name = new global::System.Data.DataColumn("sensor_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_name);
                this.columnserial_num = new global::System.Data.DataColumn("serial_num", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnserial_num);
                this.columnsensor_depth_ft = new global::System.Data.DataColumn("sensor_depth_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_depth_ft);
                this.columnmeasure_down_ft = new global::System.Data.DataColumn("measure_down_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmeasure_down_ft);
                this.columntoc_elev_ft = new global::System.Data.DataColumn("toc_elev_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntoc_elev_ft);
                this.columncal_fact_psi_a = new global::System.Data.DataColumn("cal_fact_psi_a", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_psi_a);
                this.columncal_fact_psi_b = new global::System.Data.DataColumn("cal_fact_psi_b", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_psi_b);
                this.columncal_fact_psi_c = new global::System.Data.DataColumn("cal_fact_psi_c", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_psi_c);
                this.columncal_fact_head_ft_a = new global::System.Data.DataColumn("cal_fact_head_ft_a", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_head_ft_a);
                this.columncal_fact_head_ft_b = new global::System.Data.DataColumn("cal_fact_head_ft_b", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_head_ft_b);
                this.columncal_fact_head_ft_c = new global::System.Data.DataColumn("cal_fact_head_ft_c", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncal_fact_head_ft_c);
                this.columnnorthing_ft = new global::System.Data.DataColumn("northing_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnorthing_ft);
                this.columneasting_ft = new global::System.Data.DataColumn("easting_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columneasting_ft);
                this.columnnotes = new global::System.Data.DataColumn("notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotes);
                this.columnf2_scale = new global::System.Data.DataColumn("f2_scale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnf2_scale);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsensor_name}, true));
                this.columnsensor_id.AllowDBNull = false;
                this.columnsensor_id.MaxLength = 50;
                this.columnsensor_name.AllowDBNull = false;
                this.columnsensor_name.Unique = true;
                this.columnsensor_name.MaxLength = 50;
                this.columnserial_num.MaxLength = 50;
                this.columnsensor_depth_ft.AllowDBNull = false;
                this.columnmeasure_down_ft.AllowDBNull = false;
                this.columntoc_elev_ft.AllowDBNull = false;
                this.columncal_fact_psi_a.AllowDBNull = false;
                this.columncal_fact_psi_b.AllowDBNull = false;
                this.columncal_fact_psi_c.AllowDBNull = false;
                this.columncal_fact_head_ft_a.AllowDBNull = false;
                this.columncal_fact_head_ft_b.AllowDBNull = false;
                this.columncal_fact_head_ft_c.AllowDBNull = false;
                this.columnnotes.MaxLength = 2147483647;
                this.columnf2_scale.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow NewMONITOR_LOCATIONSRow() {
                return ((MONITOR_LOCATIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MONITOR_LOCATIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MONITOR_LOCATIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MONITOR_LOCATIONSRowChanged != null)) {
                    this.MONITOR_LOCATIONSRowChanged(this, new MONITOR_LOCATIONSRowChangeEvent(((MONITOR_LOCATIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MONITOR_LOCATIONSRowChanging != null)) {
                    this.MONITOR_LOCATIONSRowChanging(this, new MONITOR_LOCATIONSRowChangeEvent(((MONITOR_LOCATIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MONITOR_LOCATIONSRowDeleted != null)) {
                    this.MONITOR_LOCATIONSRowDeleted(this, new MONITOR_LOCATIONSRowChangeEvent(((MONITOR_LOCATIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MONITOR_LOCATIONSRowDeleting != null)) {
                    this.MONITOR_LOCATIONSRowDeleting(this, new MONITOR_LOCATIONSRowChangeEvent(((MONITOR_LOCATIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMONITOR_LOCATIONSRow(MONITOR_LOCATIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MONITOR_LOCATIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GwMonUpdaterDataTable : global::System.Data.TypedTableBase<GwMonUpdaterRow> {
            
            private global::System.Data.DataColumn columnreadingId;
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columnreadingHertz;
            
            private global::System.Data.DataColumn columnheadPsi;
            
            private global::System.Data.DataColumn columntempCelsius;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterDataTable() {
                this.TableName = "GwMonUpdater";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GwMonUpdaterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GwMonUpdaterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingIdColumn {
                get {
                    return this.columnreadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingHertzColumn {
                get {
                    return this.columnreadingHertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headPsiColumn {
                get {
                    return this.columnheadPsi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempCelsiusColumn {
                get {
                    return this.columntempCelsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow this[int index] {
                get {
                    return ((GwMonUpdaterRow)(this.Rows[index]));
                }
            }
            
            public event GwMonUpdaterRowChangeEventHandler GwMonUpdaterRowChanging;
            
            public event GwMonUpdaterRowChangeEventHandler GwMonUpdaterRowChanged;
            
            public event GwMonUpdaterRowChangeEventHandler GwMonUpdaterRowDeleting;
            
            public event GwMonUpdaterRowChangeEventHandler GwMonUpdaterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGwMonUpdaterRow(GwMonUpdaterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow AddGwMonUpdaterRow(int readingId, System.DateTime readingDate, double readingHertz, double headPsi, double tempCelsius) {
                GwMonUpdaterRow rowGwMonUpdaterRow = ((GwMonUpdaterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        readingId,
                        readingDate,
                        readingHertz,
                        headPsi,
                        tempCelsius};
                rowGwMonUpdaterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGwMonUpdaterRow);
                return rowGwMonUpdaterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GwMonUpdaterDataTable cln = ((GwMonUpdaterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GwMonUpdaterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreadingId = base.Columns["readingId"];
                this.columnreadingDate = base.Columns["readingDate"];
                this.columnreadingHertz = base.Columns["readingHertz"];
                this.columnheadPsi = base.Columns["headPsi"];
                this.columntempCelsius = base.Columns["tempCelsius"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreadingId = new global::System.Data.DataColumn("readingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingId);
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columnreadingHertz = new global::System.Data.DataColumn("readingHertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingHertz);
                this.columnheadPsi = new global::System.Data.DataColumn("headPsi", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadPsi);
                this.columntempCelsius = new global::System.Data.DataColumn("tempCelsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempCelsius);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow NewGwMonUpdaterRow() {
                return ((GwMonUpdaterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GwMonUpdaterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GwMonUpdaterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GwMonUpdaterRowChanged != null)) {
                    this.GwMonUpdaterRowChanged(this, new GwMonUpdaterRowChangeEvent(((GwMonUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GwMonUpdaterRowChanging != null)) {
                    this.GwMonUpdaterRowChanging(this, new GwMonUpdaterRowChangeEvent(((GwMonUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GwMonUpdaterRowDeleted != null)) {
                    this.GwMonUpdaterRowDeleted(this, new GwMonUpdaterRowChangeEvent(((GwMonUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GwMonUpdaterRowDeleting != null)) {
                    this.GwMonUpdaterRowDeleting(this, new GwMonUpdaterRowChangeEvent(((GwMonUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGwMonUpdaterRow(GwMonUpdaterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GwMonUpdaterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SessionListDataTable : global::System.Data.TypedTableBase<SessionListRow> {
            
            private global::System.Data.DataColumn columnsession_edit_id;
            
            private global::System.Data.DataColumn columnedit_date;
            
            private global::System.Data.DataColumn columnedited_by;
            
            private global::System.Data.DataColumn columnsensor_name;
            
            private global::System.Data.DataColumn columnupdate_comment;
            
            private global::System.Data.DataColumn columnreading_start_date;
            
            private global::System.Data.DataColumn columnreading_end_date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionListDataTable() {
                this.TableName = "SessionList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SessionListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn session_edit_idColumn {
                get {
                    return this.columnsession_edit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_dateColumn {
                get {
                    return this.columnedit_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edited_byColumn {
                get {
                    return this.columnedited_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_nameColumn {
                get {
                    return this.columnsensor_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_commentColumn {
                get {
                    return this.columnupdate_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reading_start_dateColumn {
                get {
                    return this.columnreading_start_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reading_end_dateColumn {
                get {
                    return this.columnreading_end_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionListRow this[int index] {
                get {
                    return ((SessionListRow)(this.Rows[index]));
                }
            }
            
            public event SessionListRowChangeEventHandler SessionListRowChanging;
            
            public event SessionListRowChangeEventHandler SessionListRowChanged;
            
            public event SessionListRowChangeEventHandler SessionListRowDeleting;
            
            public event SessionListRowChangeEventHandler SessionListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSessionListRow(SessionListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionListRow AddSessionListRow(int session_edit_id, System.DateTime edit_date, string edited_by, string sensor_name, string update_comment, System.DateTime reading_start_date, System.DateTime reading_end_date) {
                SessionListRow rowSessionListRow = ((SessionListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        session_edit_id,
                        edit_date,
                        edited_by,
                        sensor_name,
                        update_comment,
                        reading_start_date,
                        reading_end_date};
                rowSessionListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSessionListRow);
                return rowSessionListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionListRow FindBysession_edit_id(int session_edit_id) {
                return ((SessionListRow)(this.Rows.Find(new object[] {
                            session_edit_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SessionListDataTable cln = ((SessionListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SessionListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsession_edit_id = base.Columns["session_edit_id"];
                this.columnedit_date = base.Columns["edit_date"];
                this.columnedited_by = base.Columns["edited_by"];
                this.columnsensor_name = base.Columns["sensor_name"];
                this.columnupdate_comment = base.Columns["update_comment"];
                this.columnreading_start_date = base.Columns["reading_start_date"];
                this.columnreading_end_date = base.Columns["reading_end_date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsession_edit_id = new global::System.Data.DataColumn("session_edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsession_edit_id);
                this.columnedit_date = new global::System.Data.DataColumn("edit_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_date);
                this.columnedited_by = new global::System.Data.DataColumn("edited_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedited_by);
                this.columnsensor_name = new global::System.Data.DataColumn("sensor_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_name);
                this.columnupdate_comment = new global::System.Data.DataColumn("update_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_comment);
                this.columnreading_start_date = new global::System.Data.DataColumn("reading_start_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreading_start_date);
                this.columnreading_end_date = new global::System.Data.DataColumn("reading_end_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreading_end_date);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsession_edit_id}, true));
                this.columnsession_edit_id.AllowDBNull = false;
                this.columnsession_edit_id.Unique = true;
                this.columnedit_date.AllowDBNull = false;
                this.columnedited_by.AllowDBNull = false;
                this.columnedited_by.MaxLength = 50;
                this.columnsensor_name.AllowDBNull = false;
                this.columnsensor_name.MaxLength = 50;
                this.columnupdate_comment.AllowDBNull = false;
                this.columnupdate_comment.MaxLength = 100;
                this.columnreading_start_date.AllowDBNull = false;
                this.columnreading_end_date.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionListRow NewSessionListRow() {
                return ((SessionListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SessionListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SessionListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionListRowChanged != null)) {
                    this.SessionListRowChanged(this, new SessionListRowChangeEvent(((SessionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionListRowChanging != null)) {
                    this.SessionListRowChanging(this, new SessionListRowChangeEvent(((SessionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionListRowDeleted != null)) {
                    this.SessionListRowDeleted(this, new SessionListRowChangeEvent(((SessionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionListRowDeleting != null)) {
                    this.SessionListRowDeleting(this, new SessionListRowChangeEvent(((SessionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSessionListRow(SessionListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SessionListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MonitorListDataTable : global::System.Data.TypedTableBase<MonitorListRow> {
            
            private global::System.Data.DataColumn columnsensor_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonitorListDataTable() {
                this.TableName = "MonitorList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MonitorListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MonitorListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_nameColumn {
                get {
                    return this.columnsensor_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonitorListRow this[int index] {
                get {
                    return ((MonitorListRow)(this.Rows[index]));
                }
            }
            
            public event MonitorListRowChangeEventHandler MonitorListRowChanging;
            
            public event MonitorListRowChangeEventHandler MonitorListRowChanged;
            
            public event MonitorListRowChangeEventHandler MonitorListRowDeleting;
            
            public event MonitorListRowChangeEventHandler MonitorListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMonitorListRow(MonitorListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonitorListRow AddMonitorListRow(string sensor_name) {
                MonitorListRow rowMonitorListRow = ((MonitorListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sensor_name};
                rowMonitorListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMonitorListRow);
                return rowMonitorListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonitorListRow FindBysensor_name(string sensor_name) {
                return ((MonitorListRow)(this.Rows.Find(new object[] {
                            sensor_name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MonitorListDataTable cln = ((MonitorListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MonitorListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsensor_name = base.Columns["sensor_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsensor_name = new global::System.Data.DataColumn("sensor_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsensor_name}, true));
                this.columnsensor_name.AllowDBNull = false;
                this.columnsensor_name.Unique = true;
                this.columnsensor_name.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonitorListRow NewMonitorListRow() {
                return ((MonitorListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MonitorListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MonitorListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MonitorListRowChanged != null)) {
                    this.MonitorListRowChanged(this, new MonitorListRowChangeEvent(((MonitorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MonitorListRowChanging != null)) {
                    this.MonitorListRowChanging(this, new MonitorListRowChangeEvent(((MonitorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MonitorListRowDeleted != null)) {
                    this.MonitorListRowDeleted(this, new MonitorListRowChangeEvent(((MonitorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MonitorListRowDeleting != null)) {
                    this.MonitorListRowDeleting(this, new MonitorListRowChangeEvent(((MonitorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMonitorListRow(MonitorListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MonitorListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GW_MONITOR_READINGDataTable : global::System.Data.TypedTableBase<GW_MONITOR_READINGRow> {
            
            private global::System.Data.DataColumn columngwmon_edit_id;
            
            private global::System.Data.DataColumn columnsession_edit_id;
            
            private global::System.Data.DataColumn columnedit_date;
            
            private global::System.Data.DataColumn columnedited_by;
            
            private global::System.Data.DataColumn columnsensor_name;
            
            private global::System.Data.DataColumn columnreading_date;
            
            private global::System.Data.DataColumn columnreading_hertz;
            
            private global::System.Data.DataColumn columnhead_psi;
            
            private global::System.Data.DataColumn columnhead_ft;
            
            private global::System.Data.DataColumn columntemp_celsius;
            
            private global::System.Data.DataColumn columnf2_scale;
            
            private global::System.Data.DataColumn columngw_depth_ft;
            
            private global::System.Data.DataColumn columngw_elev_ft;
            
            private global::System.Data.DataColumn columndata_qual_flag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITOR_READINGDataTable() {
                this.TableName = "GW_MONITOR_READING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GW_MONITOR_READINGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GW_MONITOR_READINGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwmon_edit_idColumn {
                get {
                    return this.columngwmon_edit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn session_edit_idColumn {
                get {
                    return this.columnsession_edit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_dateColumn {
                get {
                    return this.columnedit_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edited_byColumn {
                get {
                    return this.columnedited_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_nameColumn {
                get {
                    return this.columnsensor_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reading_dateColumn {
                get {
                    return this.columnreading_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reading_hertzColumn {
                get {
                    return this.columnreading_hertz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn head_psiColumn {
                get {
                    return this.columnhead_psi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn head_ftColumn {
                get {
                    return this.columnhead_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn temp_celsiusColumn {
                get {
                    return this.columntemp_celsius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn f2_scaleColumn {
                get {
                    return this.columnf2_scale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gw_depth_ftColumn {
                get {
                    return this.columngw_depth_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gw_elev_ftColumn {
                get {
                    return this.columngw_elev_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_qual_flagColumn {
                get {
                    return this.columndata_qual_flag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITOR_READINGRow this[int index] {
                get {
                    return ((GW_MONITOR_READINGRow)(this.Rows[index]));
                }
            }
            
            public event GW_MONITOR_READINGRowChangeEventHandler GW_MONITOR_READINGRowChanging;
            
            public event GW_MONITOR_READINGRowChangeEventHandler GW_MONITOR_READINGRowChanged;
            
            public event GW_MONITOR_READINGRowChangeEventHandler GW_MONITOR_READINGRowDeleting;
            
            public event GW_MONITOR_READINGRowChangeEventHandler GW_MONITOR_READINGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGW_MONITOR_READINGRow(GW_MONITOR_READINGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITOR_READINGRow AddGW_MONITOR_READINGRow(int session_edit_id, System.DateTime edit_date, string edited_by, string sensor_name, System.DateTime reading_date, double reading_hertz, double head_psi, double head_ft, double temp_celsius, double f2_scale, double gw_depth_ft, double gw_elev_ft, string data_qual_flag) {
                GW_MONITOR_READINGRow rowGW_MONITOR_READINGRow = ((GW_MONITOR_READINGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        session_edit_id,
                        edit_date,
                        edited_by,
                        sensor_name,
                        reading_date,
                        reading_hertz,
                        head_psi,
                        head_ft,
                        temp_celsius,
                        f2_scale,
                        gw_depth_ft,
                        gw_elev_ft,
                        data_qual_flag};
                rowGW_MONITOR_READINGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGW_MONITOR_READINGRow);
                return rowGW_MONITOR_READINGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITOR_READINGRow FindBygwmon_edit_id(int gwmon_edit_id) {
                return ((GW_MONITOR_READINGRow)(this.Rows.Find(new object[] {
                            gwmon_edit_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GW_MONITOR_READINGDataTable cln = ((GW_MONITOR_READINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GW_MONITOR_READINGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngwmon_edit_id = base.Columns["gwmon_edit_id"];
                this.columnsession_edit_id = base.Columns["session_edit_id"];
                this.columnedit_date = base.Columns["edit_date"];
                this.columnedited_by = base.Columns["edited_by"];
                this.columnsensor_name = base.Columns["sensor_name"];
                this.columnreading_date = base.Columns["reading_date"];
                this.columnreading_hertz = base.Columns["reading_hertz"];
                this.columnhead_psi = base.Columns["head_psi"];
                this.columnhead_ft = base.Columns["head_ft"];
                this.columntemp_celsius = base.Columns["temp_celsius"];
                this.columnf2_scale = base.Columns["f2_scale"];
                this.columngw_depth_ft = base.Columns["gw_depth_ft"];
                this.columngw_elev_ft = base.Columns["gw_elev_ft"];
                this.columndata_qual_flag = base.Columns["data_qual_flag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngwmon_edit_id = new global::System.Data.DataColumn("gwmon_edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwmon_edit_id);
                this.columnsession_edit_id = new global::System.Data.DataColumn("session_edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsession_edit_id);
                this.columnedit_date = new global::System.Data.DataColumn("edit_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_date);
                this.columnedited_by = new global::System.Data.DataColumn("edited_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedited_by);
                this.columnsensor_name = new global::System.Data.DataColumn("sensor_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_name);
                this.columnreading_date = new global::System.Data.DataColumn("reading_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreading_date);
                this.columnreading_hertz = new global::System.Data.DataColumn("reading_hertz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreading_hertz);
                this.columnhead_psi = new global::System.Data.DataColumn("head_psi", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhead_psi);
                this.columnhead_ft = new global::System.Data.DataColumn("head_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhead_ft);
                this.columntemp_celsius = new global::System.Data.DataColumn("temp_celsius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp_celsius);
                this.columnf2_scale = new global::System.Data.DataColumn("f2_scale", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnf2_scale);
                this.columngw_depth_ft = new global::System.Data.DataColumn("gw_depth_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngw_depth_ft);
                this.columngw_elev_ft = new global::System.Data.DataColumn("gw_elev_ft", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngw_elev_ft);
                this.columndata_qual_flag = new global::System.Data.DataColumn("data_qual_flag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_qual_flag);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columngwmon_edit_id}, true));
                this.columngwmon_edit_id.AutoIncrement = true;
                this.columngwmon_edit_id.AutoIncrementSeed = -1;
                this.columngwmon_edit_id.AutoIncrementStep = -1;
                this.columngwmon_edit_id.AllowDBNull = false;
                this.columngwmon_edit_id.ReadOnly = true;
                this.columngwmon_edit_id.Unique = true;
                this.columnedited_by.MaxLength = 50;
                this.columnsensor_name.MaxLength = 50;
                this.columnreading_date.AllowDBNull = false;
                this.columnreading_hertz.AllowDBNull = false;
                this.columndata_qual_flag.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITOR_READINGRow NewGW_MONITOR_READINGRow() {
                return ((GW_MONITOR_READINGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GW_MONITOR_READINGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GW_MONITOR_READINGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GW_MONITOR_READINGRowChanged != null)) {
                    this.GW_MONITOR_READINGRowChanged(this, new GW_MONITOR_READINGRowChangeEvent(((GW_MONITOR_READINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GW_MONITOR_READINGRowChanging != null)) {
                    this.GW_MONITOR_READINGRowChanging(this, new GW_MONITOR_READINGRowChangeEvent(((GW_MONITOR_READINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GW_MONITOR_READINGRowDeleted != null)) {
                    this.GW_MONITOR_READINGRowDeleted(this, new GW_MONITOR_READINGRowChangeEvent(((GW_MONITOR_READINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GW_MONITOR_READINGRowDeleting != null)) {
                    this.GW_MONITOR_READINGRowDeleting(this, new GW_MONITOR_READINGRowChangeEvent(((GW_MONITOR_READINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGW_MONITOR_READINGRow(GW_MONITOR_READINGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GW_MONITOR_READINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SESSIONDataTable : global::System.Data.TypedTableBase<SESSIONRow> {
            
            private global::System.Data.DataColumn columnsession_edit_id;
            
            private global::System.Data.DataColumn columnedit_date;
            
            private global::System.Data.DataColumn columnedited_by;
            
            private global::System.Data.DataColumn columnsensor_name;
            
            private global::System.Data.DataColumn columnupdate_comment;
            
            private global::System.Data.DataColumn columnreading_start_date;
            
            private global::System.Data.DataColumn columnreading_end_date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONDataTable() {
                this.TableName = "SESSION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SESSIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SESSIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn session_edit_idColumn {
                get {
                    return this.columnsession_edit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_dateColumn {
                get {
                    return this.columnedit_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edited_byColumn {
                get {
                    return this.columnedited_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_nameColumn {
                get {
                    return this.columnsensor_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_commentColumn {
                get {
                    return this.columnupdate_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reading_start_dateColumn {
                get {
                    return this.columnreading_start_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reading_end_dateColumn {
                get {
                    return this.columnreading_end_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow this[int index] {
                get {
                    return ((SESSIONRow)(this.Rows[index]));
                }
            }
            
            public event SESSIONRowChangeEventHandler SESSIONRowChanging;
            
            public event SESSIONRowChangeEventHandler SESSIONRowChanged;
            
            public event SESSIONRowChangeEventHandler SESSIONRowDeleting;
            
            public event SESSIONRowChangeEventHandler SESSIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSESSIONRow(SESSIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow AddSESSIONRow(int session_edit_id, System.DateTime edit_date, string edited_by, string sensor_name, string update_comment, System.DateTime reading_start_date, System.DateTime reading_end_date) {
                SESSIONRow rowSESSIONRow = ((SESSIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        session_edit_id,
                        edit_date,
                        edited_by,
                        sensor_name,
                        update_comment,
                        reading_start_date,
                        reading_end_date};
                rowSESSIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSESSIONRow);
                return rowSESSIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow FindBysession_edit_id(int session_edit_id) {
                return ((SESSIONRow)(this.Rows.Find(new object[] {
                            session_edit_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SESSIONDataTable cln = ((SESSIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SESSIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsession_edit_id = base.Columns["session_edit_id"];
                this.columnedit_date = base.Columns["edit_date"];
                this.columnedited_by = base.Columns["edited_by"];
                this.columnsensor_name = base.Columns["sensor_name"];
                this.columnupdate_comment = base.Columns["update_comment"];
                this.columnreading_start_date = base.Columns["reading_start_date"];
                this.columnreading_end_date = base.Columns["reading_end_date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsession_edit_id = new global::System.Data.DataColumn("session_edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsession_edit_id);
                this.columnedit_date = new global::System.Data.DataColumn("edit_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_date);
                this.columnedited_by = new global::System.Data.DataColumn("edited_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedited_by);
                this.columnsensor_name = new global::System.Data.DataColumn("sensor_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_name);
                this.columnupdate_comment = new global::System.Data.DataColumn("update_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_comment);
                this.columnreading_start_date = new global::System.Data.DataColumn("reading_start_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreading_start_date);
                this.columnreading_end_date = new global::System.Data.DataColumn("reading_end_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreading_end_date);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsession_edit_id}, true));
                this.columnsession_edit_id.AllowDBNull = false;
                this.columnsession_edit_id.Unique = true;
                this.columnedit_date.AllowDBNull = false;
                this.columnedited_by.AllowDBNull = false;
                this.columnedited_by.MaxLength = 50;
                this.columnsensor_name.AllowDBNull = false;
                this.columnsensor_name.MaxLength = 50;
                this.columnupdate_comment.AllowDBNull = false;
                this.columnupdate_comment.MaxLength = 100;
                this.columnreading_start_date.AllowDBNull = false;
                this.columnreading_end_date.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow NewSESSIONRow() {
                return ((SESSIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SESSIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SESSIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SESSIONRowChanged != null)) {
                    this.SESSIONRowChanged(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SESSIONRowChanging != null)) {
                    this.SESSIONRowChanging(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SESSIONRowDeleted != null)) {
                    this.SESSIONRowDeleted(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SESSIONRowDeleting != null)) {
                    this.SESSIONRowDeleting(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSESSIONRow(SESSIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SESSIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GwMonQcDataTable : global::System.Data.TypedTableBase<GwMonQcRow> {
            
            private global::System.Data.DataColumn columnreadingDate;
            
            private global::System.Data.DataColumn columngwMonError;
            
            private global::System.Data.DataColumn columnerrorDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcDataTable() {
                this.TableName = "GwMonQc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GwMonQcDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GwMonQcDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn readingDateColumn {
                get {
                    return this.columnreadingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gwMonErrorColumn {
                get {
                    return this.columngwMonError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn errorDescriptionColumn {
                get {
                    return this.columnerrorDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow this[int index] {
                get {
                    return ((GwMonQcRow)(this.Rows[index]));
                }
            }
            
            public event GwMonQcRowChangeEventHandler GwMonQcRowChanging;
            
            public event GwMonQcRowChangeEventHandler GwMonQcRowChanged;
            
            public event GwMonQcRowChangeEventHandler GwMonQcRowDeleting;
            
            public event GwMonQcRowChangeEventHandler GwMonQcRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGwMonQcRow(GwMonQcRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow AddGwMonQcRow(string readingDate, string gwMonError, string errorDescription) {
                GwMonQcRow rowGwMonQcRow = ((GwMonQcRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        readingDate,
                        gwMonError,
                        errorDescription};
                rowGwMonQcRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGwMonQcRow);
                return rowGwMonQcRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow FindByreadingDate(string readingDate) {
                return ((GwMonQcRow)(this.Rows.Find(new object[] {
                            readingDate})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GwMonQcDataTable cln = ((GwMonQcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GwMonQcDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreadingDate = base.Columns["readingDate"];
                this.columngwMonError = base.Columns["gwMonError"];
                this.columnerrorDescription = base.Columns["errorDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreadingDate = new global::System.Data.DataColumn("readingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreadingDate);
                this.columngwMonError = new global::System.Data.DataColumn("gwMonError", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngwMonError);
                this.columnerrorDescription = new global::System.Data.DataColumn("errorDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnerrorDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnreadingDate}, true));
                this.columnreadingDate.AllowDBNull = false;
                this.columnreadingDate.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow NewGwMonQcRow() {
                return ((GwMonQcRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GwMonQcRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GwMonQcRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GwMonQcRowChanged != null)) {
                    this.GwMonQcRowChanged(this, new GwMonQcRowChangeEvent(((GwMonQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GwMonQcRowChanging != null)) {
                    this.GwMonQcRowChanging(this, new GwMonQcRowChangeEvent(((GwMonQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GwMonQcRowDeleted != null)) {
                    this.GwMonQcRowDeleted(this, new GwMonQcRowChangeEvent(((GwMonQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GwMonQcRowDeleting != null)) {
                    this.GwMonQcRowDeleting(this, new GwMonQcRowChangeEvent(((GwMonQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGwMonQcRow(GwMonQcRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GroundwaterMonitorDataSet ds = new GroundwaterMonitorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GwMonQcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MONITOR_LOCATIONSRow : global::System.Data.DataRow {
            
            private MONITOR_LOCATIONSDataTable tableMONITOR_LOCATIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MONITOR_LOCATIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMONITOR_LOCATIONS = ((MONITOR_LOCATIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_id {
                get {
                    return ((string)(this[this.tableMONITOR_LOCATIONS.sensor_idColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_name {
                get {
                    return ((string)(this[this.tableMONITOR_LOCATIONS.sensor_nameColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.sensor_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string serial_num {
                get {
                    try {
                        return ((string)(this[this.tableMONITOR_LOCATIONS.serial_numColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'serial_num\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.serial_numColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double sensor_depth_ft {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.sensor_depth_ftColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.sensor_depth_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double measure_down_ft {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.measure_down_ftColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.measure_down_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double toc_elev_ft {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.toc_elev_ftColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.toc_elev_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_psi_a {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_psi_aColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_psi_aColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_psi_b {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_psi_bColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_psi_bColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_psi_c {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_psi_cColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_psi_cColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_head_ft_a {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_aColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_aColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_head_ft_b {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_bColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_bColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cal_fact_head_ft_c {
                get {
                    return ((double)(this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_cColumn]));
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.cal_fact_head_ft_cColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double northing_ft {
                get {
                    try {
                        return ((double)(this[this.tableMONITOR_LOCATIONS.northing_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'northing_ft\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.northing_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double easting_ft {
                get {
                    try {
                        return ((double)(this[this.tableMONITOR_LOCATIONS.easting_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'easting_ft\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.easting_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notes {
                get {
                    try {
                        return ((string)(this[this.tableMONITOR_LOCATIONS.notesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notes\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.notesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string f2_scale {
                get {
                    try {
                        return ((string)(this[this.tableMONITOR_LOCATIONS.f2_scaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'f2_scale\' in table \'MONITOR_LOCATIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMONITOR_LOCATIONS.f2_scaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isserial_numNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.serial_numColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setserial_numNull() {
                this[this.tableMONITOR_LOCATIONS.serial_numColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnorthing_ftNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.northing_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnorthing_ftNull() {
                this[this.tableMONITOR_LOCATIONS.northing_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iseasting_ftNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.easting_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Seteasting_ftNull() {
                this[this.tableMONITOR_LOCATIONS.easting_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnotesNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.notesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnotesNull() {
                this[this.tableMONITOR_LOCATIONS.notesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isf2_scaleNull() {
                return this.IsNull(this.tableMONITOR_LOCATIONS.f2_scaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setf2_scaleNull() {
                this[this.tableMONITOR_LOCATIONS.f2_scaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GwMonUpdaterRow : global::System.Data.DataRow {
            
            private GwMonUpdaterDataTable tableGwMonUpdater;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GwMonUpdaterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGwMonUpdater = ((GwMonUpdaterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int readingId {
                get {
                    try {
                        return ((int)(this[this.tableGwMonUpdater.readingIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingId\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.readingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime readingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGwMonUpdater.readingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingDate\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double readingHertz {
                get {
                    try {
                        return ((double)(this[this.tableGwMonUpdater.readingHertzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'readingHertz\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.readingHertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double headPsi {
                get {
                    try {
                        return ((double)(this[this.tableGwMonUpdater.headPsiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headPsi\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.headPsiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tempCelsius {
                get {
                    try {
                        return ((double)(this[this.tableGwMonUpdater.tempCelsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempCelsius\' in table \'GwMonUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonUpdater.tempCelsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingIdNull() {
                return this.IsNull(this.tableGwMonUpdater.readingIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingIdNull() {
                this[this.tableGwMonUpdater.readingIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingDateNull() {
                return this.IsNull(this.tableGwMonUpdater.readingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingDateNull() {
                this[this.tableGwMonUpdater.readingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreadingHertzNull() {
                return this.IsNull(this.tableGwMonUpdater.readingHertzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreadingHertzNull() {
                this[this.tableGwMonUpdater.readingHertzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadPsiNull() {
                return this.IsNull(this.tableGwMonUpdater.headPsiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadPsiNull() {
                this[this.tableGwMonUpdater.headPsiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempCelsiusNull() {
                return this.IsNull(this.tableGwMonUpdater.tempCelsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempCelsiusNull() {
                this[this.tableGwMonUpdater.tempCelsiusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SessionListRow : global::System.Data.DataRow {
            
            private SessionListDataTable tableSessionList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSessionList = ((SessionListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int session_edit_id {
                get {
                    return ((int)(this[this.tableSessionList.session_edit_idColumn]));
                }
                set {
                    this[this.tableSessionList.session_edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime edit_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSessionList.edit_dateColumn]));
                }
                set {
                    this[this.tableSessionList.edit_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edited_by {
                get {
                    return ((string)(this[this.tableSessionList.edited_byColumn]));
                }
                set {
                    this[this.tableSessionList.edited_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_name {
                get {
                    return ((string)(this[this.tableSessionList.sensor_nameColumn]));
                }
                set {
                    this[this.tableSessionList.sensor_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string update_comment {
                get {
                    return ((string)(this[this.tableSessionList.update_commentColumn]));
                }
                set {
                    this[this.tableSessionList.update_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime reading_start_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSessionList.reading_start_dateColumn]));
                }
                set {
                    this[this.tableSessionList.reading_start_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime reading_end_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSessionList.reading_end_dateColumn]));
                }
                set {
                    this[this.tableSessionList.reading_end_dateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MonitorListRow : global::System.Data.DataRow {
            
            private MonitorListDataTable tableMonitorList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MonitorListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMonitorList = ((MonitorListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_name {
                get {
                    return ((string)(this[this.tableMonitorList.sensor_nameColumn]));
                }
                set {
                    this[this.tableMonitorList.sensor_nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GW_MONITOR_READINGRow : global::System.Data.DataRow {
            
            private GW_MONITOR_READINGDataTable tableGW_MONITOR_READING;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GW_MONITOR_READINGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGW_MONITOR_READING = ((GW_MONITOR_READINGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int gwmon_edit_id {
                get {
                    return ((int)(this[this.tableGW_MONITOR_READING.gwmon_edit_idColumn]));
                }
                set {
                    this[this.tableGW_MONITOR_READING.gwmon_edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int session_edit_id {
                get {
                    try {
                        return ((int)(this[this.tableGW_MONITOR_READING.session_edit_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'session_edit_id\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.session_edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime edit_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGW_MONITOR_READING.edit_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'edit_date\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.edit_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edited_by {
                get {
                    try {
                        return ((string)(this[this.tableGW_MONITOR_READING.edited_byColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'edited_by\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.edited_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_name {
                get {
                    try {
                        return ((string)(this[this.tableGW_MONITOR_READING.sensor_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_name\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.sensor_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime reading_date {
                get {
                    return ((global::System.DateTime)(this[this.tableGW_MONITOR_READING.reading_dateColumn]));
                }
                set {
                    this[this.tableGW_MONITOR_READING.reading_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double reading_hertz {
                get {
                    return ((double)(this[this.tableGW_MONITOR_READING.reading_hertzColumn]));
                }
                set {
                    this[this.tableGW_MONITOR_READING.reading_hertzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double head_psi {
                get {
                    try {
                        return ((double)(this[this.tableGW_MONITOR_READING.head_psiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'head_psi\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.head_psiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double head_ft {
                get {
                    try {
                        return ((double)(this[this.tableGW_MONITOR_READING.head_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'head_ft\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.head_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double temp_celsius {
                get {
                    try {
                        return ((double)(this[this.tableGW_MONITOR_READING.temp_celsiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp_celsius\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.temp_celsiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double f2_scale {
                get {
                    try {
                        return ((double)(this[this.tableGW_MONITOR_READING.f2_scaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'f2_scale\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.f2_scaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gw_depth_ft {
                get {
                    try {
                        return ((double)(this[this.tableGW_MONITOR_READING.gw_depth_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gw_depth_ft\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.gw_depth_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gw_elev_ft {
                get {
                    try {
                        return ((double)(this[this.tableGW_MONITOR_READING.gw_elev_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gw_elev_ft\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.gw_elev_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string data_qual_flag {
                get {
                    try {
                        return ((string)(this[this.tableGW_MONITOR_READING.data_qual_flagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'data_qual_flag\' in table \'GW_MONITOR_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGW_MONITOR_READING.data_qual_flagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issession_edit_idNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.session_edit_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsession_edit_idNull() {
                this[this.tableGW_MONITOR_READING.session_edit_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedit_dateNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.edit_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedit_dateNull() {
                this[this.tableGW_MONITOR_READING.edit_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedited_byNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.edited_byColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedited_byNull() {
                this[this.tableGW_MONITOR_READING.edited_byColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_nameNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.sensor_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_nameNull() {
                this[this.tableGW_MONITOR_READING.sensor_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishead_psiNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.head_psiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethead_psiNull() {
                this[this.tableGW_MONITOR_READING.head_psiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishead_ftNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.head_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethead_ftNull() {
                this[this.tableGW_MONITOR_READING.head_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istemp_celsiusNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.temp_celsiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settemp_celsiusNull() {
                this[this.tableGW_MONITOR_READING.temp_celsiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isf2_scaleNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.f2_scaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setf2_scaleNull() {
                this[this.tableGW_MONITOR_READING.f2_scaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgw_depth_ftNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.gw_depth_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgw_depth_ftNull() {
                this[this.tableGW_MONITOR_READING.gw_depth_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgw_elev_ftNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.gw_elev_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgw_elev_ftNull() {
                this[this.tableGW_MONITOR_READING.gw_elev_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdata_qual_flagNull() {
                return this.IsNull(this.tableGW_MONITOR_READING.data_qual_flagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdata_qual_flagNull() {
                this[this.tableGW_MONITOR_READING.data_qual_flagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SESSIONRow : global::System.Data.DataRow {
            
            private SESSIONDataTable tableSESSION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SESSIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSESSION = ((SESSIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int session_edit_id {
                get {
                    return ((int)(this[this.tableSESSION.session_edit_idColumn]));
                }
                set {
                    this[this.tableSESSION.session_edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime edit_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSESSION.edit_dateColumn]));
                }
                set {
                    this[this.tableSESSION.edit_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edited_by {
                get {
                    return ((string)(this[this.tableSESSION.edited_byColumn]));
                }
                set {
                    this[this.tableSESSION.edited_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_name {
                get {
                    return ((string)(this[this.tableSESSION.sensor_nameColumn]));
                }
                set {
                    this[this.tableSESSION.sensor_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string update_comment {
                get {
                    return ((string)(this[this.tableSESSION.update_commentColumn]));
                }
                set {
                    this[this.tableSESSION.update_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime reading_start_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSESSION.reading_start_dateColumn]));
                }
                set {
                    this[this.tableSESSION.reading_start_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime reading_end_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSESSION.reading_end_dateColumn]));
                }
                set {
                    this[this.tableSESSION.reading_end_dateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GwMonQcRow : global::System.Data.DataRow {
            
            private GwMonQcDataTable tableGwMonQc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GwMonQcRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGwMonQc = ((GwMonQcDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string readingDate {
                get {
                    return ((string)(this[this.tableGwMonQc.readingDateColumn]));
                }
                set {
                    this[this.tableGwMonQc.readingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gwMonError {
                get {
                    try {
                        return ((string)(this[this.tableGwMonQc.gwMonErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gwMonError\' in table \'GwMonQc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonQc.gwMonErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string errorDescription {
                get {
                    try {
                        return ((string)(this[this.tableGwMonQc.errorDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'errorDescription\' in table \'GwMonQc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGwMonQc.errorDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgwMonErrorNull() {
                return this.IsNull(this.tableGwMonQc.gwMonErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgwMonErrorNull() {
                this[this.tableGwMonQc.gwMonErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IserrorDescriptionNull() {
                return this.IsNull(this.tableGwMonQc.errorDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeterrorDescriptionNull() {
                this[this.tableGwMonQc.errorDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MONITOR_LOCATIONSRowChangeEvent : global::System.EventArgs {
            
            private MONITOR_LOCATIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRowChangeEvent(MONITOR_LOCATIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONITOR_LOCATIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GwMonUpdaterRowChangeEvent : global::System.EventArgs {
            
            private GwMonUpdaterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRowChangeEvent(GwMonUpdaterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonUpdaterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SessionListRowChangeEvent : global::System.EventArgs {
            
            private SessionListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionListRowChangeEvent(SessionListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MonitorListRowChangeEvent : global::System.EventArgs {
            
            private MonitorListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonitorListRowChangeEvent(MonitorListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonitorListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GW_MONITOR_READINGRowChangeEvent : global::System.EventArgs {
            
            private GW_MONITOR_READINGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITOR_READINGRowChangeEvent(GW_MONITOR_READINGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GW_MONITOR_READINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SESSIONRowChangeEvent : global::System.EventArgs {
            
            private SESSIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRowChangeEvent(SESSIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GwMonQcRowChangeEvent : global::System.EventArgs {
            
            private GwMonQcRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRowChangeEvent(GwMonQcRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GwMonQcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GMonGr.GroundwaterMonitorDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MONITOR_LOCATIONSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MONITOR_LOCATIONSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MONITOR_LOCATIONS";
            tableMapping.ColumnMappings.Add("sensor_id", "sensor_id");
            tableMapping.ColumnMappings.Add("sensor_name", "sensor_name");
            tableMapping.ColumnMappings.Add("serial_num", "serial_num");
            tableMapping.ColumnMappings.Add("sensor_depth_ft", "sensor_depth_ft");
            tableMapping.ColumnMappings.Add("measure_down_ft", "measure_down_ft");
            tableMapping.ColumnMappings.Add("toc_elev_ft", "toc_elev_ft");
            tableMapping.ColumnMappings.Add("cal_fact_psi_a", "cal_fact_psi_a");
            tableMapping.ColumnMappings.Add("cal_fact_psi_b", "cal_fact_psi_b");
            tableMapping.ColumnMappings.Add("cal_fact_psi_c", "cal_fact_psi_c");
            tableMapping.ColumnMappings.Add("cal_fact_head_ft_a", "cal_fact_head_ft_a");
            tableMapping.ColumnMappings.Add("cal_fact_head_ft_b", "cal_fact_head_ft_b");
            tableMapping.ColumnMappings.Add("cal_fact_head_ft_c", "cal_fact_head_ft_c");
            tableMapping.ColumnMappings.Add("northing_ft", "northing_ft");
            tableMapping.ColumnMappings.Add("easting_ft", "easting_ft");
            tableMapping.ColumnMappings.Add("notes", "notes");
            tableMapping.ColumnMappings.Add("f2_scale", "f2_scale");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [MONITOR_LOCATIONS] WHERE (([sensor_id] = @Original_sensor_id) AND ([sensor_name] = @Original_sensor_name) AND ((@IsNull_serial_num = 1 AND [serial_num] IS NULL) OR ([serial_num] = @Original_serial_num)) AND ([sensor_depth_ft] = @Original_sensor_depth_ft) AND ([measure_down_ft] = @Original_measure_down_ft) AND ([toc_elev_ft] = @Original_toc_elev_ft) AND ([cal_fact_psi_a] = @Original_cal_fact_psi_a) AND ([cal_fact_psi_b] = @Original_cal_fact_psi_b) AND ([cal_fact_psi_c] = @Original_cal_fact_psi_c) AND ([cal_fact_head_ft_a] = @Original_cal_fact_head_ft_a) AND ([cal_fact_head_ft_b] = @Original_cal_fact_head_ft_b) AND ([cal_fact_head_ft_c] = @Original_cal_fact_head_ft_c) AND ((@IsNull_f2_scale = 1 AND [f2_scale] IS NULL) OR ([f2_scale] = @Original_f2_scale)) AND ((@IsNull_northing_ft = 1 AND [northing_ft] IS NULL) OR ([northing_ft] = @Original_northing_ft)) AND ((@IsNull_easting_ft = 1 AND [easting_ft] IS NULL) OR ([easting_ft] = @Original_easting_ft)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_serial_num", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "serial_num", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_serial_num", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "serial_num", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_depth_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_measure_down_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "measure_down_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_toc_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "toc_elev_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_psi_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_a", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_psi_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_b", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_psi_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_c", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_head_ft_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_a", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_head_ft_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_b", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_head_ft_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_c", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_f2_scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_f2_scale", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_northing_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "northing_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_northing_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "northing_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_easting_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "easting_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_easting_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "easting_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [MONITOR_LOCATIONS] ([sensor_id], [sensor_name], [serial_num], [sensor_depth_ft], [measure_down_ft], [toc_elev_ft], [cal_fact_psi_a], [cal_fact_psi_b], [cal_fact_psi_c], [cal_fact_head_ft_a], [cal_fact_head_ft_b], [cal_fact_head_ft_c], [f2_scale], [northing_ft], [easting_ft], [notes]) VALUES (@sensor_id, @sensor_name, @serial_num, @sensor_depth_ft, @measure_down_ft, @toc_elev_ft, @cal_fact_psi_a, @cal_fact_psi_b, @cal_fact_psi_c, @cal_fact_head_ft_a, @cal_fact_head_ft_b, @cal_fact_head_ft_c, @f2_scale, @northing_ft, @easting_ft, @notes)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serial_num", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "serial_num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_depth_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@measure_down_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "measure_down_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@toc_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "toc_elev_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_a", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_b", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_c", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_a", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_b", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_c", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@f2_scale", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@northing_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "northing_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@easting_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "easting_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@notes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [MONITOR_LOCATIONS] SET [sensor_id] = @sensor_id, [sensor_name] = @sensor_" +
                "name, [serial_num] = @serial_num, [sensor_depth_ft] = @sensor_depth_ft, [measure" +
                "_down_ft] = @measure_down_ft, [toc_elev_ft] = @toc_elev_ft, [cal_fact_psi_a] = @" +
                "cal_fact_psi_a, [cal_fact_psi_b] = @cal_fact_psi_b, [cal_fact_psi_c] = @cal_fact" +
                "_psi_c, [cal_fact_head_ft_a] = @cal_fact_head_ft_a, [cal_fact_head_ft_b] = @cal_" +
                "fact_head_ft_b, [cal_fact_head_ft_c] = @cal_fact_head_ft_c, [f2_scale] = @f2_sca" +
                "le, [northing_ft] = @northing_ft, [easting_ft] = @easting_ft, [notes] = @notes W" +
                "HERE (([sensor_id] = @Original_sensor_id) AND ([sensor_name] = @Original_sensor_" +
                "name) AND ((@IsNull_serial_num = 1 AND [serial_num] IS NULL) OR ([serial_num] = " +
                "@Original_serial_num)) AND ([sensor_depth_ft] = @Original_sensor_depth_ft) AND (" +
                "[measure_down_ft] = @Original_measure_down_ft) AND ([toc_elev_ft] = @Original_to" +
                "c_elev_ft) AND ([cal_fact_psi_a] = @Original_cal_fact_psi_a) AND ([cal_fact_psi_" +
                "b] = @Original_cal_fact_psi_b) AND ([cal_fact_psi_c] = @Original_cal_fact_psi_c)" +
                " AND ([cal_fact_head_ft_a] = @Original_cal_fact_head_ft_a) AND ([cal_fact_head_f" +
                "t_b] = @Original_cal_fact_head_ft_b) AND ([cal_fact_head_ft_c] = @Original_cal_f" +
                "act_head_ft_c) AND ((@IsNull_f2_scale = 1 AND [f2_scale] IS NULL) OR ([f2_scale]" +
                " = @Original_f2_scale)) AND ((@IsNull_northing_ft = 1 AND [northing_ft] IS NULL)" +
                " OR ([northing_ft] = @Original_northing_ft)) AND ((@IsNull_easting_ft = 1 AND [e" +
                "asting_ft] IS NULL) OR ([easting_ft] = @Original_easting_ft)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serial_num", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "serial_num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_depth_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@measure_down_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "measure_down_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@toc_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "toc_elev_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_a", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_b", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_psi_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_c", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_a", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_b", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cal_fact_head_ft_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_c", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@f2_scale", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@northing_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "northing_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@easting_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "easting_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@notes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_serial_num", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "serial_num", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_serial_num", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "serial_num", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_depth_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_measure_down_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "measure_down_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_toc_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "toc_elev_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_psi_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_a", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_psi_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_b", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_psi_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_psi_c", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_head_ft_a", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_a", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_head_ft_b", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_b", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cal_fact_head_ft_c", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cal_fact_head_ft_c", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_f2_scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_f2_scale", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_northing_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "northing_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_northing_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "northing_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_easting_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "easting_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_easting_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "easting_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     MONITOR_LOCATIONS.*\r\nFROM         MONITOR_LOCATIONS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable dataTable = new GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.MONITOR_LOCATIONSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MONITOR_LOCATIONS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_sensor_id, string Original_sensor_name, string Original_serial_num, double Original_sensor_depth_ft, double Original_measure_down_ft, double Original_toc_elev_ft, double Original_cal_fact_psi_a, double Original_cal_fact_psi_b, double Original_cal_fact_psi_c, double Original_cal_fact_head_ft_a, double Original_cal_fact_head_ft_b, double Original_cal_fact_head_ft_c, string Original_f2_scale, global::System.Nullable<double> Original_northing_ft, global::System.Nullable<double> Original_easting_ft) {
            if ((Original_sensor_id == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_sensor_id));
            }
            if ((Original_sensor_name == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_sensor_name));
            }
            if ((Original_serial_num == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_serial_num));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_sensor_depth_ft));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_measure_down_ft));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_toc_elev_ft));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((double)(Original_cal_fact_psi_a));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_cal_fact_psi_b));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((double)(Original_cal_fact_psi_c));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_cal_fact_head_ft_a));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((double)(Original_cal_fact_head_ft_b));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_cal_fact_head_ft_c));
            if ((Original_f2_scale == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_f2_scale));
            }
            if ((Original_northing_ft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_northing_ft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_easting_ft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_easting_ft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string sensor_id, 
                    string sensor_name, 
                    string serial_num, 
                    double sensor_depth_ft, 
                    double measure_down_ft, 
                    double toc_elev_ft, 
                    double cal_fact_psi_a, 
                    double cal_fact_psi_b, 
                    double cal_fact_psi_c, 
                    double cal_fact_head_ft_a, 
                    double cal_fact_head_ft_b, 
                    double cal_fact_head_ft_c, 
                    string f2_scale, 
                    global::System.Nullable<double> northing_ft, 
                    global::System.Nullable<double> easting_ft, 
                    string notes) {
            if ((sensor_id == null)) {
                throw new global::System.ArgumentNullException("sensor_id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(sensor_id));
            }
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sensor_name));
            }
            if ((serial_num == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(serial_num));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(sensor_depth_ft));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(measure_down_ft));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(toc_elev_ft));
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(cal_fact_psi_a));
            this.Adapter.InsertCommand.Parameters[7].Value = ((double)(cal_fact_psi_b));
            this.Adapter.InsertCommand.Parameters[8].Value = ((double)(cal_fact_psi_c));
            this.Adapter.InsertCommand.Parameters[9].Value = ((double)(cal_fact_head_ft_a));
            this.Adapter.InsertCommand.Parameters[10].Value = ((double)(cal_fact_head_ft_b));
            this.Adapter.InsertCommand.Parameters[11].Value = ((double)(cal_fact_head_ft_c));
            if ((f2_scale == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(f2_scale));
            }
            if ((northing_ft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(northing_ft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((easting_ft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(easting_ft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((notes == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(notes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string sensor_id, 
                    string sensor_name, 
                    string serial_num, 
                    double sensor_depth_ft, 
                    double measure_down_ft, 
                    double toc_elev_ft, 
                    double cal_fact_psi_a, 
                    double cal_fact_psi_b, 
                    double cal_fact_psi_c, 
                    double cal_fact_head_ft_a, 
                    double cal_fact_head_ft_b, 
                    double cal_fact_head_ft_c, 
                    string f2_scale, 
                    global::System.Nullable<double> northing_ft, 
                    global::System.Nullable<double> easting_ft, 
                    string notes, 
                    string Original_sensor_id, 
                    string Original_sensor_name, 
                    string Original_serial_num, 
                    double Original_sensor_depth_ft, 
                    double Original_measure_down_ft, 
                    double Original_toc_elev_ft, 
                    double Original_cal_fact_psi_a, 
                    double Original_cal_fact_psi_b, 
                    double Original_cal_fact_psi_c, 
                    double Original_cal_fact_head_ft_a, 
                    double Original_cal_fact_head_ft_b, 
                    double Original_cal_fact_head_ft_c, 
                    string Original_f2_scale, 
                    global::System.Nullable<double> Original_northing_ft, 
                    global::System.Nullable<double> Original_easting_ft) {
            if ((sensor_id == null)) {
                throw new global::System.ArgumentNullException("sensor_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(sensor_id));
            }
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(sensor_name));
            }
            if ((serial_num == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(serial_num));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(sensor_depth_ft));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(measure_down_ft));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(toc_elev_ft));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(cal_fact_psi_a));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(cal_fact_psi_b));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(cal_fact_psi_c));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(cal_fact_head_ft_a));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(cal_fact_head_ft_b));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(cal_fact_head_ft_c));
            if ((f2_scale == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(f2_scale));
            }
            if ((northing_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(northing_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((easting_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(easting_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((notes == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(notes));
            }
            if ((Original_sensor_id == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_sensor_id));
            }
            if ((Original_sensor_name == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_sensor_name));
            }
            if ((Original_serial_num == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_serial_num));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(Original_sensor_depth_ft));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(Original_measure_down_ft));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(Original_toc_elev_ft));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(Original_cal_fact_psi_a));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(Original_cal_fact_psi_b));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(Original_cal_fact_psi_c));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(Original_cal_fact_head_ft_a));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((double)(Original_cal_fact_head_ft_b));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((double)(Original_cal_fact_head_ft_c));
            if ((Original_f2_scale == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_f2_scale));
            }
            if ((Original_northing_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((double)(Original_northing_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_easting_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((double)(Original_easting_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string sensor_id, 
                    string serial_num, 
                    double sensor_depth_ft, 
                    double measure_down_ft, 
                    double toc_elev_ft, 
                    double cal_fact_psi_a, 
                    double cal_fact_psi_b, 
                    double cal_fact_psi_c, 
                    double cal_fact_head_ft_a, 
                    double cal_fact_head_ft_b, 
                    double cal_fact_head_ft_c, 
                    string f2_scale, 
                    global::System.Nullable<double> northing_ft, 
                    global::System.Nullable<double> easting_ft, 
                    string notes, 
                    string Original_sensor_id, 
                    string Original_sensor_name, 
                    string Original_serial_num, 
                    double Original_sensor_depth_ft, 
                    double Original_measure_down_ft, 
                    double Original_toc_elev_ft, 
                    double Original_cal_fact_psi_a, 
                    double Original_cal_fact_psi_b, 
                    double Original_cal_fact_psi_c, 
                    double Original_cal_fact_head_ft_a, 
                    double Original_cal_fact_head_ft_b, 
                    double Original_cal_fact_head_ft_c, 
                    string Original_f2_scale, 
                    global::System.Nullable<double> Original_northing_ft, 
                    global::System.Nullable<double> Original_easting_ft) {
            return this.Update(sensor_id, Original_sensor_name, serial_num, sensor_depth_ft, measure_down_ft, toc_elev_ft, cal_fact_psi_a, cal_fact_psi_b, cal_fact_psi_c, cal_fact_head_ft_a, cal_fact_head_ft_b, cal_fact_head_ft_c, f2_scale, northing_ft, easting_ft, notes, Original_sensor_id, Original_sensor_name, Original_serial_num, Original_sensor_depth_ft, Original_measure_down_ft, Original_toc_elev_ft, Original_cal_fact_psi_a, Original_cal_fact_psi_b, Original_cal_fact_psi_c, Original_cal_fact_head_ft_a, Original_cal_fact_head_ft_b, Original_cal_fact_head_ft_c, Original_f2_scale, Original_northing_ft, Original_easting_ft);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GwMonUpdaterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GwMonUpdaterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GwMonUpdater";
            tableMapping.ColumnMappings.Add("readingId", "readingId");
            tableMapping.ColumnMappings.Add("readingDate", "readingDate");
            tableMapping.ColumnMappings.Add("readingHertz", "readingHertz");
            tableMapping.ColumnMappings.Add("headPsi", "headPsi");
            tableMapping.ColumnMappings.Add("tempCelsius", "tempCelsius");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonUpdateConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     *\r\nFROM         UserUpdate.csv";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.GwMonUpdaterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.GwMonUpdaterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.GwMonUpdaterDataTable dataTable = new GroundwaterMonitorDataSet.GwMonUpdaterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SessionListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SessionListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SessionList";
            tableMapping.ColumnMappings.Add("session_edit_id", "session_edit_id");
            tableMapping.ColumnMappings.Add("edit_date", "edit_date");
            tableMapping.ColumnMappings.Add("edited_by", "edited_by");
            tableMapping.ColumnMappings.Add("sensor_name", "sensor_name");
            tableMapping.ColumnMappings.Add("update_comment", "update_comment");
            tableMapping.ColumnMappings.Add("reading_start_date", "reading_start_date");
            tableMapping.ColumnMappings.Add("reading_end_date", "reading_end_date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [SessionList] WHERE (([session_edit_id] = @Original_session_edit_id) AND ([edit_date] = @Original_edit_date) AND ([edited_by] = @Original_edited_by) AND ([sensor_name] = @Original_sensor_name) AND ([update_comment] = @Original_update_comment) AND ([reading_start_date] = @Original_reading_start_date) AND ([reading_end_date] = @Original_reading_end_date))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_update_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_start_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_start_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_end_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_end_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [SessionList] ([session_edit_id], [edit_date], [edited_by], [sensor_name], [update_comment], [reading_start_date], [reading_end_date]) VALUES (@session_edit_id, @edit_date, @edited_by, @sensor_name, @update_comment, @reading_start_date, @reading_end_date);
SELECT session_edit_id, edit_date, edited_by, sensor_name, update_comment, reading_start_date, reading_end_date FROM SessionList WHERE (session_edit_id = @session_edit_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_start_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_start_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_end_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_end_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [SessionList] SET [session_edit_id] = @session_edit_id, [edit_date] = @edit_date, [edited_by] = @edited_by, [sensor_name] = @sensor_name, [update_comment] = @update_comment, [reading_start_date] = @reading_start_date, [reading_end_date] = @reading_end_date WHERE (([session_edit_id] = @Original_session_edit_id) AND ([edit_date] = @Original_edit_date) AND ([edited_by] = @Original_edited_by) AND ([sensor_name] = @Original_sensor_name) AND ([update_comment] = @Original_update_comment) AND ([reading_start_date] = @Original_reading_start_date) AND ([reading_end_date] = @Original_reading_end_date));
SELECT session_edit_id, edit_date, edited_by, sensor_name, update_comment, reading_start_date, reading_end_date FROM SessionList WHERE (session_edit_id = @session_edit_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_start_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_start_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_end_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_end_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_update_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_start_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_start_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_end_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_end_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     SessionList.*\r\nFROM         SessionList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     SessionList.*\r\nFROM         SessionList";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.SessionListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.SessionListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.SessionListDataTable dataTable = new GroundwaterMonitorDataSet.SessionListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(GroundwaterMonitorDataSet.SessionListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.SessionListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SessionList");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_session_edit_id, System.DateTime Original_edit_date, string Original_edited_by, string Original_sensor_name, string Original_update_comment, System.DateTime Original_reading_start_date, System.DateTime Original_reading_end_date) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_session_edit_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_edited_by));
            }
            if ((Original_sensor_name == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_sensor_name));
            }
            if ((Original_update_comment == null)) {
                throw new global::System.ArgumentNullException("Original_update_comment");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_update_comment));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_reading_start_date));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_reading_end_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int session_edit_id, System.DateTime edit_date, string edited_by, string sensor_name, string update_comment, System.DateTime reading_start_date, System.DateTime reading_end_date) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(session_edit_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(edited_by));
            }
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(sensor_name));
            }
            if ((update_comment == null)) {
                throw new global::System.ArgumentNullException("update_comment");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(update_comment));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(reading_start_date));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(reading_end_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int session_edit_id, System.DateTime edit_date, string edited_by, string sensor_name, string update_comment, System.DateTime reading_start_date, System.DateTime reading_end_date, int Original_session_edit_id, System.DateTime Original_edit_date, string Original_edited_by, string Original_sensor_name, string Original_update_comment, System.DateTime Original_reading_start_date, System.DateTime Original_reading_end_date) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(session_edit_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(edited_by));
            }
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(sensor_name));
            }
            if ((update_comment == null)) {
                throw new global::System.ArgumentNullException("update_comment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(update_comment));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(reading_start_date));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(reading_end_date));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_session_edit_id));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_edited_by));
            }
            if ((Original_sensor_name == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_sensor_name));
            }
            if ((Original_update_comment == null)) {
                throw new global::System.ArgumentNullException("Original_update_comment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_update_comment));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_reading_start_date));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_reading_end_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime edit_date, string edited_by, string sensor_name, string update_comment, System.DateTime reading_start_date, System.DateTime reading_end_date, int Original_session_edit_id, System.DateTime Original_edit_date, string Original_edited_by, string Original_sensor_name, string Original_update_comment, System.DateTime Original_reading_start_date, System.DateTime Original_reading_end_date) {
            return this.Update(Original_session_edit_id, edit_date, edited_by, sensor_name, update_comment, reading_start_date, reading_end_date, Original_session_edit_id, Original_edit_date, Original_edited_by, Original_sensor_name, Original_update_comment, Original_reading_start_date, Original_reading_end_date);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MonitorListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MonitorListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MonitorList";
            tableMapping.ColumnMappings.Add("sensor_name", "sensor_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [MonitorList] WHERE (([sensor_name] = @Original_sensor_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [MonitorList] ([sensor_name]) VALUES (@sensor_name);\r\nSELECT sensor_n" +
                "ame FROM MonitorList WHERE (sensor_name = @sensor_name)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [MonitorList] SET [sensor_name] = @sensor_name WHERE (([sensor_name] = @Or" +
                "iginal_sensor_name));\r\nSELECT sensor_name FROM MonitorList WHERE (sensor_name = " +
                "@sensor_name)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     MonitorList.*\r\nFROM         MonitorList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.MonitorListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.MonitorListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.MonitorListDataTable dataTable = new GroundwaterMonitorDataSet.MonitorListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.MonitorListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MonitorList");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_sensor_name) {
            if ((Original_sensor_name == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_sensor_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string sensor_name) {
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(sensor_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string sensor_name, string Original_sensor_name) {
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(sensor_name));
            }
            if ((Original_sensor_name == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Original_sensor_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Original_sensor_name) {
            return this.Update(Original_sensor_name, Original_sensor_name);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GW_MONITOR_READINGTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GW_MONITOR_READINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GW_MONITOR_READING";
            tableMapping.ColumnMappings.Add("gwmon_edit_id", "gwmon_edit_id");
            tableMapping.ColumnMappings.Add("session_edit_id", "session_edit_id");
            tableMapping.ColumnMappings.Add("edit_date", "edit_date");
            tableMapping.ColumnMappings.Add("edited_by", "edited_by");
            tableMapping.ColumnMappings.Add("sensor_name", "sensor_name");
            tableMapping.ColumnMappings.Add("reading_date", "reading_date");
            tableMapping.ColumnMappings.Add("reading_hertz", "reading_hertz");
            tableMapping.ColumnMappings.Add("head_psi", "head_psi");
            tableMapping.ColumnMappings.Add("head_ft", "head_ft");
            tableMapping.ColumnMappings.Add("temp_celsius", "temp_celsius");
            tableMapping.ColumnMappings.Add("f2_scale", "f2_scale");
            tableMapping.ColumnMappings.Add("gw_depth_ft", "gw_depth_ft");
            tableMapping.ColumnMappings.Add("gw_elev_ft", "gw_elev_ft");
            tableMapping.ColumnMappings.Add("data_qual_flag", "data_qual_flag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GW_MONITOR_READING] WHERE (([gwmon_edit_id] = @Original_gwmon_edit_id) AND ((@IsNull_session_edit_id = 1 AND [session_edit_id] IS NULL) OR ([session_edit_id] = @Original_session_edit_id)) AND ((@IsNull_edit_date = 1 AND [edit_date] IS NULL) OR ([edit_date] = @Original_edit_date)) AND ((@IsNull_edited_by = 1 AND [edited_by] IS NULL) OR ([edited_by] = @Original_edited_by)) AND ((@IsNull_sensor_name = 1 AND [sensor_name] IS NULL) OR ([sensor_name] = @Original_sensor_name)) AND ([reading_date] = @Original_reading_date) AND ([reading_hertz] = @Original_reading_hertz) AND ((@IsNull_head_psi = 1 AND [head_psi] IS NULL) OR ([head_psi] = @Original_head_psi)) AND ((@IsNull_head_ft = 1 AND [head_ft] IS NULL) OR ([head_ft] = @Original_head_ft)) AND ((@IsNull_temp_celsius = 1 AND [temp_celsius] IS NULL) OR ([temp_celsius] = @Original_temp_celsius)) AND ((@IsNull_f2_scale = 1 AND [f2_scale] IS NULL) OR ([f2_scale] = @Original_f2_scale)) AND ((@IsNull_gw_depth_ft = 1 AND [gw_depth_ft] IS NULL) OR ([gw_depth_ft] = @Original_gw_depth_ft)) AND ((@IsNull_gw_elev_ft = 1 AND [gw_elev_ft] IS NULL) OR ([gw_elev_ft] = @Original_gw_elev_ft)) AND ((@IsNull_data_qual_flag = 1 AND [data_qual_flag] IS NULL) OR ([data_qual_flag] = @Original_data_qual_flag)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_gwmon_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwmon_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_edit_date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_edited_by", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_sensor_name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_hertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_hertz", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_head_psi", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_psi", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_head_psi", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_psi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_head_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_head_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp_celsius", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp_celsius", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp_celsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp_celsius", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_f2_scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_f2_scale", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_gw_depth_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_depth_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_gw_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_depth_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_gw_elev_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_elev_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_gw_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_elev_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_data_qual_flag", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_qual_flag", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_qual_flag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_qual_flag", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GW_MONITOR_READING] ([session_edit_id], [edit_date], [edited_by], [sensor_name], [reading_date], [reading_hertz], [head_psi], [head_ft], [temp_celsius], [f2_scale], [gw_depth_ft], [gw_elev_ft], [data_qual_flag]) VALUES (@session_edit_id, @edit_date, @edited_by, @sensor_name, @reading_date, @reading_hertz, @head_psi, @head_ft, @temp_celsius, @f2_scale, @gw_depth_ft, @gw_elev_ft, @data_qual_flag);
SELECT gwmon_edit_id, session_edit_id, edit_date, edited_by, sensor_name, reading_date, reading_hertz, head_psi, head_ft, temp_celsius, f2_scale, gw_depth_ft, gw_elev_ft, data_qual_flag FROM GW_MONITOR_READING WHERE (gwmon_edit_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_hertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_hertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@head_psi", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_psi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@head_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp_celsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp_celsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@f2_scale", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gw_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_depth_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gw_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_elev_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_qual_flag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_qual_flag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [GW_MONITOR_READING] SET [session_edit_id] = @session_edit_id, [edit_date]" +
                " = @edit_date, [edited_by] = @edited_by, [sensor_name] = @sensor_name, [reading_" +
                "date] = @reading_date, [reading_hertz] = @reading_hertz, [head_psi] = @head_psi," +
                " [head_ft] = @head_ft, [temp_celsius] = @temp_celsius, [f2_scale] = @f2_scale, [" +
                "gw_depth_ft] = @gw_depth_ft, [gw_elev_ft] = @gw_elev_ft, [data_qual_flag] = @dat" +
                "a_qual_flag WHERE (([gwmon_edit_id] = @Original_gwmon_edit_id) AND ((@IsNull_ses" +
                "sion_edit_id = 1 AND [session_edit_id] IS NULL) OR ([session_edit_id] = @Origina" +
                "l_session_edit_id)) AND ((@IsNull_edit_date = 1 AND [edit_date] IS NULL) OR ([ed" +
                "it_date] = @Original_edit_date)) AND ((@IsNull_edited_by = 1 AND [edited_by] IS " +
                "NULL) OR ([edited_by] = @Original_edited_by)) AND ((@IsNull_sensor_name = 1 AND " +
                "[sensor_name] IS NULL) OR ([sensor_name] = @Original_sensor_name)) AND ([reading" +
                "_date] = @Original_reading_date) AND ([reading_hertz] = @Original_reading_hertz)" +
                " AND ((@IsNull_head_psi = 1 AND [head_psi] IS NULL) OR ([head_psi] = @Original_h" +
                "ead_psi)) AND ((@IsNull_head_ft = 1 AND [head_ft] IS NULL) OR ([head_ft] = @Orig" +
                "inal_head_ft)) AND ((@IsNull_temp_celsius = 1 AND [temp_celsius] IS NULL) OR ([t" +
                "emp_celsius] = @Original_temp_celsius)) AND ((@IsNull_f2_scale = 1 AND [f2_scale" +
                "] IS NULL) OR ([f2_scale] = @Original_f2_scale)) AND ((@IsNull_gw_depth_ft = 1 A" +
                "ND [gw_depth_ft] IS NULL) OR ([gw_depth_ft] = @Original_gw_depth_ft)) AND ((@IsN" +
                "ull_gw_elev_ft = 1 AND [gw_elev_ft] IS NULL) OR ([gw_elev_ft] = @Original_gw_ele" +
                "v_ft)) AND ((@IsNull_data_qual_flag = 1 AND [data_qual_flag] IS NULL) OR ([data_" +
                "qual_flag] = @Original_data_qual_flag)));\r\nSELECT gwmon_edit_id, session_edit_id" +
                ", edit_date, edited_by, sensor_name, reading_date, reading_hertz, head_psi, head" +
                "_ft, temp_celsius, f2_scale, gw_depth_ft, gw_elev_ft, data_qual_flag FROM GW_MON" +
                "ITOR_READING WHERE (gwmon_edit_id = @gwmon_edit_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_hertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_hertz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@head_psi", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_psi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@head_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp_celsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp_celsius", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@f2_scale", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gw_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_depth_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gw_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_elev_ft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_qual_flag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_qual_flag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_gwmon_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gwmon_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_edit_date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_edited_by", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_sensor_name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_hertz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_hertz", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_head_psi", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_psi", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_head_psi", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_psi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_head_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_head_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "head_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp_celsius", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp_celsius", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp_celsius", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp_celsius", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_f2_scale", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_f2_scale", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "f2_scale", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_gw_depth_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_depth_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_gw_depth_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_depth_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_gw_elev_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_elev_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_gw_elev_ft", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gw_elev_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_data_qual_flag", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_qual_flag", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_qual_flag", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_qual_flag", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gwmon_edit_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "gwmon_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     GW_MONITOR_READING.*\r\nFROM         GW_MONITOR_READING";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.GW_MONITOR_READINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.GW_MONITOR_READINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.GW_MONITOR_READINGDataTable dataTable = new GroundwaterMonitorDataSet.GW_MONITOR_READINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.GW_MONITOR_READINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "GW_MONITOR_READING");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_gwmon_edit_id, global::System.Nullable<int> Original_session_edit_id, global::System.Nullable<global::System.DateTime> Original_edit_date, string Original_edited_by, string Original_sensor_name, System.DateTime Original_reading_date, double Original_reading_hertz, global::System.Nullable<double> Original_head_psi, global::System.Nullable<double> Original_head_ft, global::System.Nullable<double> Original_temp_celsius, global::System.Nullable<double> Original_f2_scale, global::System.Nullable<double> Original_gw_depth_ft, global::System.Nullable<double> Original_gw_elev_ft, string Original_data_qual_flag) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_gwmon_edit_id));
            if ((Original_session_edit_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_session_edit_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_edit_date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_edit_date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_edited_by == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_edited_by));
            }
            if ((Original_sensor_name == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_sensor_name));
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_reading_date));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_reading_hertz));
            if ((Original_head_psi.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_head_psi.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_head_ft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_head_ft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_temp_celsius.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_temp_celsius.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_f2_scale.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_f2_scale.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_gw_depth_ft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((double)(Original_gw_depth_ft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_gw_elev_ft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((double)(Original_gw_elev_ft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_data_qual_flag == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_data_qual_flag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> session_edit_id, global::System.Nullable<global::System.DateTime> edit_date, string edited_by, string sensor_name, System.DateTime reading_date, double reading_hertz, global::System.Nullable<double> head_psi, global::System.Nullable<double> head_ft, global::System.Nullable<double> temp_celsius, global::System.Nullable<double> f2_scale, global::System.Nullable<double> gw_depth_ft, global::System.Nullable<double> gw_elev_ft, string data_qual_flag) {
            if ((session_edit_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(session_edit_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((edit_date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(edit_date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((edited_by == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(edited_by));
            }
            if ((sensor_name == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(sensor_name));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(reading_date));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(reading_hertz));
            if ((head_psi.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(head_psi.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((head_ft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(head_ft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((temp_celsius.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(temp_celsius.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((f2_scale.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(f2_scale.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gw_depth_ft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(gw_depth_ft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((gw_elev_ft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(gw_elev_ft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((data_qual_flag == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(data_qual_flag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> session_edit_id, 
                    global::System.Nullable<global::System.DateTime> edit_date, 
                    string edited_by, 
                    string sensor_name, 
                    System.DateTime reading_date, 
                    double reading_hertz, 
                    global::System.Nullable<double> head_psi, 
                    global::System.Nullable<double> head_ft, 
                    global::System.Nullable<double> temp_celsius, 
                    global::System.Nullable<double> f2_scale, 
                    global::System.Nullable<double> gw_depth_ft, 
                    global::System.Nullable<double> gw_elev_ft, 
                    string data_qual_flag, 
                    int Original_gwmon_edit_id, 
                    global::System.Nullable<int> Original_session_edit_id, 
                    global::System.Nullable<global::System.DateTime> Original_edit_date, 
                    string Original_edited_by, 
                    string Original_sensor_name, 
                    System.DateTime Original_reading_date, 
                    double Original_reading_hertz, 
                    global::System.Nullable<double> Original_head_psi, 
                    global::System.Nullable<double> Original_head_ft, 
                    global::System.Nullable<double> Original_temp_celsius, 
                    global::System.Nullable<double> Original_f2_scale, 
                    global::System.Nullable<double> Original_gw_depth_ft, 
                    global::System.Nullable<double> Original_gw_elev_ft, 
                    string Original_data_qual_flag, 
                    int gwmon_edit_id) {
            if ((session_edit_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(session_edit_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((edit_date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(edit_date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((edited_by == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(edited_by));
            }
            if ((sensor_name == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(sensor_name));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(reading_date));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(reading_hertz));
            if ((head_psi.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(head_psi.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((head_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(head_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((temp_celsius.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(temp_celsius.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((f2_scale.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(f2_scale.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((gw_depth_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(gw_depth_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((gw_elev_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(gw_elev_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((data_qual_flag == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(data_qual_flag));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_gwmon_edit_id));
            if ((Original_session_edit_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_session_edit_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_edit_date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_edit_date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_edited_by == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_edited_by));
            }
            if ((Original_sensor_name == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_sensor_name));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_reading_date));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(Original_reading_hertz));
            if ((Original_head_psi.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(Original_head_psi.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_head_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((double)(Original_head_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_temp_celsius.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(Original_temp_celsius.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_f2_scale.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(Original_f2_scale.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_gw_depth_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((double)(Original_gw_depth_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_gw_elev_ft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((double)(Original_gw_elev_ft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_data_qual_flag == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_data_qual_flag));
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(gwmon_edit_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> session_edit_id, 
                    global::System.Nullable<global::System.DateTime> edit_date, 
                    string edited_by, 
                    string sensor_name, 
                    System.DateTime reading_date, 
                    double reading_hertz, 
                    global::System.Nullable<double> head_psi, 
                    global::System.Nullable<double> head_ft, 
                    global::System.Nullable<double> temp_celsius, 
                    global::System.Nullable<double> f2_scale, 
                    global::System.Nullable<double> gw_depth_ft, 
                    global::System.Nullable<double> gw_elev_ft, 
                    string data_qual_flag, 
                    int Original_gwmon_edit_id, 
                    global::System.Nullable<int> Original_session_edit_id, 
                    global::System.Nullable<global::System.DateTime> Original_edit_date, 
                    string Original_edited_by, 
                    string Original_sensor_name, 
                    System.DateTime Original_reading_date, 
                    double Original_reading_hertz, 
                    global::System.Nullable<double> Original_head_psi, 
                    global::System.Nullable<double> Original_head_ft, 
                    global::System.Nullable<double> Original_temp_celsius, 
                    global::System.Nullable<double> Original_f2_scale, 
                    global::System.Nullable<double> Original_gw_depth_ft, 
                    global::System.Nullable<double> Original_gw_elev_ft, 
                    string Original_data_qual_flag) {
            return this.Update(session_edit_id, edit_date, edited_by, sensor_name, reading_date, reading_hertz, head_psi, head_ft, temp_celsius, f2_scale, gw_depth_ft, gw_elev_ft, data_qual_flag, Original_gwmon_edit_id, Original_session_edit_id, Original_edit_date, Original_edited_by, Original_sensor_name, Original_reading_date, Original_reading_hertz, Original_head_psi, Original_head_ft, Original_temp_celsius, Original_f2_scale, Original_gw_depth_ft, Original_gw_elev_ft, Original_data_qual_flag, Original_gwmon_edit_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SESSIONTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SESSIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SESSION";
            tableMapping.ColumnMappings.Add("session_edit_id", "session_edit_id");
            tableMapping.ColumnMappings.Add("edit_date", "edit_date");
            tableMapping.ColumnMappings.Add("edited_by", "edited_by");
            tableMapping.ColumnMappings.Add("sensor_name", "sensor_name");
            tableMapping.ColumnMappings.Add("update_comment", "update_comment");
            tableMapping.ColumnMappings.Add("reading_start_date", "reading_start_date");
            tableMapping.ColumnMappings.Add("reading_end_date", "reading_end_date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [SESSION] WHERE (([session_edit_id] = @Original_session_edit_id) AND ([edit_date] = @Original_edit_date) AND ([edited_by] = @Original_edited_by) AND ([sensor_name] = @Original_sensor_name) AND ([update_comment] = @Original_update_comment) AND ([reading_start_date] = @Original_reading_start_date) AND ([reading_end_date] = @Original_reading_end_date))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_update_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_start_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_start_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_end_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_end_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [SESSION] ([session_edit_id], [edit_date], [edited_by], [sensor_name], [update_comment], [reading_start_date], [reading_end_date]) VALUES (@session_edit_id, @edit_date, @edited_by, @sensor_name, @update_comment, @reading_start_date, @reading_end_date);
SELECT session_edit_id, edit_date, edited_by, sensor_name, update_comment, reading_start_date, reading_end_date FROM SESSION WHERE (session_edit_id = @session_edit_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_start_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_start_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_end_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_end_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [SESSION] SET [session_edit_id] = @session_edit_id, [edit_date] = @edit_date, [edited_by] = @edited_by, [sensor_name] = @sensor_name, [update_comment] = @update_comment, [reading_start_date] = @reading_start_date, [reading_end_date] = @reading_end_date WHERE (([session_edit_id] = @Original_session_edit_id) AND ([edit_date] = @Original_edit_date) AND ([edited_by] = @Original_edited_by) AND ([sensor_name] = @Original_sensor_name) AND ([update_comment] = @Original_update_comment) AND ([reading_start_date] = @Original_reading_start_date) AND ([reading_end_date] = @Original_reading_end_date));
SELECT session_edit_id, edit_date, edited_by, sensor_name, update_comment, reading_start_date, reading_end_date FROM SESSION WHERE (session_edit_id = @session_edit_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_start_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_start_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reading_end_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_end_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sensor_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sensor_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_update_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_start_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_start_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reading_end_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reading_end_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GMonGr.Properties.Settings.Default.GwMonitoringConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     session_edit_id, edit_date, edited_by, sensor_name, update_comment, re" +
                "ading_start_date, reading_end_date\r\nFROM         SESSION";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GroundwaterMonitorDataSet.SESSIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GroundwaterMonitorDataSet.SESSIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GroundwaterMonitorDataSet.SESSIONDataTable dataTable = new GroundwaterMonitorDataSet.SESSIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet.SESSIONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GroundwaterMonitorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SESSION");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_session_edit_id, System.DateTime Original_edit_date, string Original_edited_by, string Original_sensor_name, string Original_update_comment, System.DateTime Original_reading_start_date, System.DateTime Original_reading_end_date) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_session_edit_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_edited_by));
            }
            if ((Original_sensor_name == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_sensor_name));
            }
            if ((Original_update_comment == null)) {
                throw new global::System.ArgumentNullException("Original_update_comment");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_update_comment));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_reading_start_date));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_reading_end_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int session_edit_id, System.DateTime edit_date, string edited_by, string sensor_name, string update_comment, System.DateTime reading_start_date, System.DateTime reading_end_date) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(session_edit_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(edited_by));
            }
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(sensor_name));
            }
            if ((update_comment == null)) {
                throw new global::System.ArgumentNullException("update_comment");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(update_comment));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(reading_start_date));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(reading_end_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int session_edit_id, System.DateTime edit_date, string edited_by, string sensor_name, string update_comment, System.DateTime reading_start_date, System.DateTime reading_end_date, int Original_session_edit_id, System.DateTime Original_edit_date, string Original_edited_by, string Original_sensor_name, string Original_update_comment, System.DateTime Original_reading_start_date, System.DateTime Original_reading_end_date) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(session_edit_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(edited_by));
            }
            if ((sensor_name == null)) {
                throw new global::System.ArgumentNullException("sensor_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(sensor_name));
            }
            if ((update_comment == null)) {
                throw new global::System.ArgumentNullException("update_comment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(update_comment));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(reading_start_date));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(reading_end_date));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_session_edit_id));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_edited_by));
            }
            if ((Original_sensor_name == null)) {
                throw new global::System.ArgumentNullException("Original_sensor_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_sensor_name));
            }
            if ((Original_update_comment == null)) {
                throw new global::System.ArgumentNullException("Original_update_comment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_update_comment));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_reading_start_date));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_reading_end_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime edit_date, string edited_by, string sensor_name, string update_comment, System.DateTime reading_start_date, System.DateTime reading_end_date, int Original_session_edit_id, System.DateTime Original_edit_date, string Original_edited_by, string Original_sensor_name, string Original_update_comment, System.DateTime Original_reading_start_date, System.DateTime Original_reading_end_date) {
            return this.Update(Original_session_edit_id, edit_date, edited_by, sensor_name, update_comment, reading_start_date, reading_end_date, Original_session_edit_id, Original_edit_date, Original_edited_by, Original_sensor_name, Original_update_comment, Original_reading_start_date, Original_reading_end_date);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private MONITOR_LOCATIONSTableAdapter _mONITOR_LOCATIONSTableAdapter;
        
        private SessionListTableAdapter _sessionListTableAdapter;
        
        private MonitorListTableAdapter _monitorListTableAdapter;
        
        private GW_MONITOR_READINGTableAdapter _gW_MONITOR_READINGTableAdapter;
        
        private SESSIONTableAdapter _sESSIONTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MONITOR_LOCATIONSTableAdapter MONITOR_LOCATIONSTableAdapter {
            get {
                return this._mONITOR_LOCATIONSTableAdapter;
            }
            set {
                this._mONITOR_LOCATIONSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SessionListTableAdapter SessionListTableAdapter {
            get {
                return this._sessionListTableAdapter;
            }
            set {
                this._sessionListTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MonitorListTableAdapter MonitorListTableAdapter {
            get {
                return this._monitorListTableAdapter;
            }
            set {
                this._monitorListTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public GW_MONITOR_READINGTableAdapter GW_MONITOR_READINGTableAdapter {
            get {
                return this._gW_MONITOR_READINGTableAdapter;
            }
            set {
                this._gW_MONITOR_READINGTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SESSIONTableAdapter SESSIONTableAdapter {
            get {
                return this._sESSIONTableAdapter;
            }
            set {
                this._sESSIONTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._mONITOR_LOCATIONSTableAdapter != null) 
                            && (this._mONITOR_LOCATIONSTableAdapter.Connection != null))) {
                    return this._mONITOR_LOCATIONSTableAdapter.Connection;
                }
                if (((this._sessionListTableAdapter != null) 
                            && (this._sessionListTableAdapter.Connection != null))) {
                    return this._sessionListTableAdapter.Connection;
                }
                if (((this._monitorListTableAdapter != null) 
                            && (this._monitorListTableAdapter.Connection != null))) {
                    return this._monitorListTableAdapter.Connection;
                }
                if (((this._gW_MONITOR_READINGTableAdapter != null) 
                            && (this._gW_MONITOR_READINGTableAdapter.Connection != null))) {
                    return this._gW_MONITOR_READINGTableAdapter.Connection;
                }
                if (((this._sESSIONTableAdapter != null) 
                            && (this._sESSIONTableAdapter.Connection != null))) {
                    return this._sESSIONTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sessionListTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._monitorListTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._gW_MONITOR_READINGTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sESSIONTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(GroundwaterMonitorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._monitorListTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MonitorList.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._monitorListTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._gW_MONITOR_READINGTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GW_MONITOR_READING.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._gW_MONITOR_READINGTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sessionListTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SessionList.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sessionListTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MONITOR_LOCATIONS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mONITOR_LOCATIONSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(GroundwaterMonitorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._monitorListTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MonitorList.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._monitorListTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._gW_MONITOR_READINGTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GW_MONITOR_READING.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._gW_MONITOR_READINGTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sessionListTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SessionList.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sessionListTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MONITOR_LOCATIONS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mONITOR_LOCATIONSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(GroundwaterMonitorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MONITOR_LOCATIONS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mONITOR_LOCATIONSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sessionListTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SessionList.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sessionListTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._gW_MONITOR_READINGTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GW_MONITOR_READING.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._gW_MONITOR_READINGTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._monitorListTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MonitorList.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._monitorListTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(GroundwaterMonitorDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._mONITOR_LOCATIONSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mONITOR_LOCATIONSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sessionListTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sessionListTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._monitorListTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._monitorListTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._gW_MONITOR_READINGTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._gW_MONITOR_READINGTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sESSIONTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sESSIONTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                    revertConnections.Add(this._mONITOR_LOCATIONSTableAdapter, this._mONITOR_LOCATIONSTableAdapter.Connection);
                    this._mONITOR_LOCATIONSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mONITOR_LOCATIONSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mONITOR_LOCATIONSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mONITOR_LOCATIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mONITOR_LOCATIONSTableAdapter.Adapter);
                    }
                }
                if ((this._sessionListTableAdapter != null)) {
                    revertConnections.Add(this._sessionListTableAdapter, this._sessionListTableAdapter.Connection);
                    this._sessionListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sessionListTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sessionListTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sessionListTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sessionListTableAdapter.Adapter);
                    }
                }
                if ((this._monitorListTableAdapter != null)) {
                    revertConnections.Add(this._monitorListTableAdapter, this._monitorListTableAdapter.Connection);
                    this._monitorListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._monitorListTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._monitorListTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._monitorListTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._monitorListTableAdapter.Adapter);
                    }
                }
                if ((this._gW_MONITOR_READINGTableAdapter != null)) {
                    revertConnections.Add(this._gW_MONITOR_READINGTableAdapter, this._gW_MONITOR_READINGTableAdapter.Connection);
                    this._gW_MONITOR_READINGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._gW_MONITOR_READINGTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._gW_MONITOR_READINGTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._gW_MONITOR_READINGTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._gW_MONITOR_READINGTableAdapter.Adapter);
                    }
                }
                if ((this._sESSIONTableAdapter != null)) {
                    revertConnections.Add(this._sESSIONTableAdapter, this._sESSIONTableAdapter.Connection);
                    this._sESSIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sESSIONTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sESSIONTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sESSIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sESSIONTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._mONITOR_LOCATIONSTableAdapter != null)) {
                    this._mONITOR_LOCATIONSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mONITOR_LOCATIONSTableAdapter]));
                    this._mONITOR_LOCATIONSTableAdapter.Transaction = null;
                }
                if ((this._sessionListTableAdapter != null)) {
                    this._sessionListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sessionListTableAdapter]));
                    this._sessionListTableAdapter.Transaction = null;
                }
                if ((this._monitorListTableAdapter != null)) {
                    this._monitorListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._monitorListTableAdapter]));
                    this._monitorListTableAdapter.Transaction = null;
                }
                if ((this._gW_MONITOR_READINGTableAdapter != null)) {
                    this._gW_MONITOR_READINGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._gW_MONITOR_READINGTableAdapter]));
                    this._gW_MONITOR_READINGTableAdapter.Transaction = null;
                }
                if ((this._sESSIONTableAdapter != null)) {
                    this._sESSIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sESSIONTableAdapter]));
                    this._sESSIONTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591